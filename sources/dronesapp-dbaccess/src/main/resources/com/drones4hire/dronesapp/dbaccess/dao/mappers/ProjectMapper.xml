<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.drones4hire.dronesapp.dbaccess.dao.mysql.ProjectMapper">

	<insert id="createProject" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
          INSERT
          		INTO drones.PROJECTS (TITLE, SUMMARY, CLIENT_ID, PILOT_ID, SERVICE_ID, DURATION_ID, LOCATION_ID, BUDGET_ID, POST_PRODUCTION_REQUIRED, STATUS, START_DATE, FINISH_DATE, SORT_ORDER)
          VALUES 
	           (
	            #{title},
	            #{summary},
	            #{clientId},
	            #{pilotId},
	            #{service.id},
	            #{duration.id},
	            #{location.id},
	            #{budget.id},
	            #{postProductionRequired},
	            #{status},
	            #{startDate},
	            #{finishDate},
	            #{sortOrder}
	           )
        ]]>
	</insert>
	
	<insert id="createProjectPaidOption" useGeneratedKeys="true">
		<![CDATA[
        	INSERT
          		INTO drones.PROJECTS_PAID_OPTIONS (PROJECT_ID, PAID_OPTION_ID)
          VALUES
        ]]>
		<foreach collection="paidOptions" item="paidOption" index="index" open="" separator="," close=";">
			(
				#{projectId},
				#{paidOption.id}
			)
		</foreach>
	</insert>


	<sql id="getProject">
        <![CDATA[
          SELECT
	      		P.ID AS PROJECT_ID,
	      		P.TITLE AS PROJECT_TITLE,
	        	P.SUMMARY AS PROJECT_SUMMARY,
	        	P.CLIENT_ID AS PROJECT_CLIENT_ID,
	        	P.PILOT_ID AS PROJECT_PILOT_ID,
	        	P.POST_PRODUCTION_REQUIRED AS PROJECT_POST_PRODUCTION_REQUIRED,
	        	P.STATUS AS PROJECT_STATUS,
	        	P.START_DATE AS PROJECT_START_DATE,
	        	P.FINISH_DATE AS PROJECT_FINISH_DATE,
	        	P.SORT_ORDER AS PROJECT_SORT_ORDER,
	        	P.AWARD_DATE AS PROJECT_AWARD_DATE,
	        	P.CREATED_AT AS PROJECT_CREATED_AT,
	        	P.MODIFIED_AT AS PROJECT_MODIFIED_AT,
	        	
	        	PO.ID AS PAID_OPTION_ID,
		        PO.TITLE AS PAID_OPTION_TITLE,
		        PO.DESCRIPTION AS PAID_OPTION_DESCRIPTION,
		        PO.PRICE AS PAID_OPTION_PRICE,
		        PO.CURRENCY AS PAID_OPTION_CURRENCY,
		        PO.RATING AS PAID_OPTION_RATING,
		        PO.MODIFIED_AT AS PAID_OPTION_MODIFIED_AT,
		        PO.CREATED_AT AS PAID_OPTION_CREATED_AT,
		        
		        L.ID AS LOCATION_ID,
		        X(L.COORDINATES) AS LOCATION_X_COORDINATE,
		        Y(L.COORDINATES) AS LOCATION_Y_COORDINATE,
		        L.CITY AS LOCATION_CITY,
		        L.POSTCODE AS LOCATION_POSTCODE,
		        L.ADDRESS AS LOCATION_ADDRESS,
		        L.MODIFIED_AT AS LOCATION_MODIFIED_AT,
		        L.CREATED_AT AS LOCATION_CREATED_AT,
		        C.ID AS COUNTRY_ID,
		        C.NAME AS COUNTRY_NAME,
		        C.MODIFIED_AT AS COUNTRY_MODIFIED_AT,
		        C.CREATED_AT AS COUNTRY_CREATED_AT,
		        ST.ID AS STATE_ID,
		        ST.NAME AS STATE_NAME,
		        ST.MODIFIED_AT AS STATE_MODIFIED_AT,
		        ST.CREATED_AT AS STATE_CREATED_AT,
		        
		        D.ID AS DURATION_ID,
		        D.TITLE AS DURATION_TITLE,
		        D.MIN AS DURATION_MIN,
		        D.MAX AS DURATION_MAX,
		        D.SORT_ORDER AS DURATION_SORT_ORDER,
		        D.MODIFIED_AT AS DURATION_MODIFIED_AT,
		        D.CREATED_AT AS DURATION_CREATED_AT,
		        
		        B.ID AS BUDGET_ID,
		        B.TITLE AS BUDGET_TITLE,
		        B.MIN AS BUDGET_MIN,
		        B.MAX AS BUDGET_MAX,
		        B.CURRENCY AS BUDGET_CURRENCY,
		        B.SORT_ORDER AS BUDGET_SORT_ORDER,
		        B.MODIFIED_AT AS BUDGET_MODIFIED_AT,
		        B.CREATED_AT AS BUDGET_CREATED_AT,
		        
		        S.ID AS SERVICE_ID,
	            S.NAME AS SERVICE_NAME,
	            S.MODIFIED_AT AS SERVICE_MODIFIED_AT,
	            S.CREATED_AT AS SERVICE_CREATED_AT,
	            SC.ID AS SERVICE_CATEGORY_ID,
	            SC.NAME AS SERVICE_CATEGORY_NAME,
	            SC.SORT_ORDER AS SERVICE_CATEGORY_SORT_ORDER,
	            SC.MODIFIED_AT AS SERVICE_CATEGORY_MODIFIED_AT,
	            SC.CREATED_AT AS SERVICE_CATEGORY_CREATED_AT,

	            A.ID AS ATTACHMENT_ID,
	            A.TITLE AS ATTACHMENT_TITLE,
	      		A.ATTACHMENT_URL AS ATTACHMENT_ATTACHMENT_URL,
		        A.TYPE AS ATTACHMENT_TYPE,
		        A.PROJECT_ID AS ATTACHMENT_PROJECT_ID,
		        A.MODIFIED_AT AS ATTACHMENT_MODIFIED_AT,
		        A.CREATED_AT AS ATTACHMENT_CREATED_AT
          FROM
	      		drones.PROJECTS P
	      LEFT JOIN
	      		drones.PROJECTS_PAID_OPTIONS PPO		
	      ON
          		P.ID = PPO.PROJECT_ID		
	      LEFT JOIN
	      		drones.PAID_OPTIONS PO
	      ON
          		PPO.PAID_OPTION_ID = PO.ID
          LEFT JOIN
	      		drones.LOCATIONS L		
	      ON
          		P.LOCATION_ID = L.ID
          LEFT JOIN
            	drones.COUNTRIES C
          ON
            L.COUNTRY_ID = C.ID
          LEFT JOIN
            	drones.STATES ST
          ON
            L.STATE_ID = ST.ID
          LEFT JOIN
	      		drones.BUDGETS B		
	      ON
          		P.BUDGET_ID = B.ID
          		
          LEFT JOIN
	      		drones.DURATIONS D	
	      ON
          		P.DURATION_ID = D.ID
          		
          LEFT JOIN
	      		drones.SERVICES S	
	      ON
          		P.SERVICE_ID = S.ID
          LEFT JOIN
	      		drones.SERVICE_CATEGORIES SC
	      ON
          		S.SERVICE_CATEGORY_ID = SC.ID
          LEFT JOIN
	      		 drones.ATTACHMENTS A
	      ON
          		A.PROJECT_ID = P.ID
        ]]>
	</sql>

	<select id="getProjectById" resultMap="ProjectResultMap">
		<include refid="getProject" />
        <![CDATA[
          WHERE
          		P.ID = #{id}
        ]]>
	</select>

	<select id="getLastProjects" resultMap="ProjectResultMap">
		<include refid="getProject" />
        <![CDATA[
          WHERE
          		P.CREATED_AT >= #{createdAfter}
          	AND
          		P.STATUS = #{status}
        ]]>
	</select>

	<select id="getAllProjects" resultMap="ProjectResultMap">
		<include refid="getProject" />
	</select>

	<sql id="searchProjectWithAdmin">
		<![CDATA[
          SELECT
	      		P.ID AS PROJECT_ID,
	      		P.TITLE AS PROJECT_TITLE,
	        	P.SUMMARY AS PROJECT_SUMMARY,
	        	P.CLIENT_ID AS PROJECT_CLIENT_ID,
	        	P.PILOT_ID AS PROJECT_PILOT_ID,

	        	CLIENT.ID AS CLIENT_USER_ID,
				CLIENT.USERNAME AS CLIENT_USER_USERNAME,
				CLIENT.EMAIL AS CLIENT_USER_EMAIL,
				CLIENT.PASSWORD AS CLIENT_USER_PASSWORD,
				CLIENT.FIRST_NAME AS CLIENT_USER_FIRST_NAME,
				CLIENT.LAST_NAME AS CLIENT_USER_LAST_NAME,
				CLIENT.PHOTO_URL AS CLIENT_USER_PHOTO_URL,
				CLIENT.INTRODUCTION AS CLIENT_USER_INTRODUCTION,
				CLIENT.SUMMARY AS CLIENT_USER_SUMMARY,
				CLIENT.ENABLED AS CLIENT_USER_ENABLED,
				CLIENT.CONFIRMED AS CLIENT_USER_CONFIRMED,
				CLIENT.MODIFIED_AT AS CLIENT_USER_MODIFIED_AT,
				CLIENT.CREATED_AT AS CLIENT_USER_CREATED_AT,

                PILOT.ID AS PILOT_USER_ID,
				PILOT.USERNAME AS PILOT_USER_USERNAME,
				PILOT.EMAIL AS PILOT_USER_EMAIL,
				PILOT.PASSWORD AS PILOT_USER_PASSWORD,
				PILOT.FIRST_NAME AS PILOT_USER_FIRST_NAME,
				PILOT.LAST_NAME AS PILOT_USER_LAST_NAME,
				PILOT.PHOTO_URL AS PILOT_USER_PHOTO_URL,
				PILOT.INTRODUCTION AS PILOT_USER_INTRODUCTION,
				PILOT.SUMMARY AS PILOT_USER_SUMMARY,
				PILOT.FLIGHT_HOURS AS PILOT_USER_FLIGHT_HOURS,
				PILOT.ENABLED AS PILOT_USER_ENABLED,
				PILOT.CONFIRMED AS PILOT_USER_CONFIRMED,
				PILOT.RATING AS PILOT_USER_RATING,
				PILOT.MODIFIED_AT AS PILOT_USER_MODIFIED_AT,
				PILOT.CREATED_AT AS PILOT_USER_CREATED_AT,

	        	P.POST_PRODUCTION_REQUIRED AS PROJECT_POST_PRODUCTION_REQUIRED,
	        	P.STATUS AS PROJECT_STATUS,
	        	P.START_DATE AS PROJECT_START_DATE,
	        	P.FINISH_DATE AS PROJECT_FINISH_DATE,
	        	P.SORT_ORDER AS PROJECT_SORT_ORDER,
	        	P.AWARD_DATE AS PROJECT_AWARD_DATE,
	        	P.CREATED_AT AS PROJECT_CREATED_AT,
	        	P.MODIFIED_AT AS PROJECT_MODIFIED_AT,

	        	T.ID AS TRANSACTION_ID,
				T.WALLET_ID AS TRANSACTION_WALLET_ID,
				T.AMOUNT AS TRANSACTION_AMOUNT,
				T.CURRENCY AS TRANSACTION_CURRENCY,
				T.TYPE AS TRANSACTION_TYPE,
				T.PURPOSE AS TRANSACTION_PURPOSE,
				T.PROJECT_ID AS TRANSACTION_PROJECT_ID,
				T.STATUS AS TRANSACTION_STATUS,
				T.MODIFIED_AT AS TRANSACTION_MODIFIED_AT,
				T.CREATED_AT AS TRANSACTION_CREATED_AT,

	        	PO.ID AS PAID_OPTION_ID,
		        PO.TITLE AS PAID_OPTION_TITLE,
		        PO.DESCRIPTION AS PAID_OPTION_DESCRIPTION,
		        PO.PRICE AS PAID_OPTION_PRICE,
		        PO.CURRENCY AS PAID_OPTION_CURRENCY,
		        PO.RATING AS PAID_OPTION_RATING,
		        PO.MODIFIED_AT AS PAID_OPTION_MODIFIED_AT,
		        PO.CREATED_AT AS PAID_OPTION_CREATED_AT,

		        L.ID AS LOCATION_ID,
		        X(L.COORDINATES) AS LOCATION_X_COORDINATE,
		        Y(L.COORDINATES) AS LOCATION_Y_COORDINATE,
		        L.CITY AS LOCATION_CITY,
		        L.POSTCODE AS LOCATION_POSTCODE,
		        L.MODIFIED_AT AS LOCATION_MODIFIED_AT,
		        L.CREATED_AT AS LOCATION_CREATED_AT,
		        C.ID AS COUNTRY_ID,
		        C.NAME AS COUNTRY_NAME,
		        C.MODIFIED_AT AS COUNTRY_MODIFIED_AT,
		        C.CREATED_AT AS COUNTRY_CREATED_AT,
		        ST.ID AS STATE_ID,
		        ST.NAME AS STATE_NAME,
		        ST.MODIFIED_AT AS STATE_MODIFIED_AT,
		        ST.CREATED_AT AS STATE_CREATED_AT,

		        D.ID AS DURATION_ID,
		        D.TITLE AS DURATION_TITLE,
		        D.MIN AS DURATION_MIN,
		        D.MAX AS DURATION_MAX,
		        D.SORT_ORDER AS DURATION_SORT_ORDER,
		        D.MODIFIED_AT AS DURATION_MODIFIED_AT,
		        D.CREATED_AT AS DURATION_CREATED_AT,

		        B.ID AS BUDGET_ID,
		        B.TITLE AS BUDGET_TITLE,
		        B.MIN AS BUDGET_MIN,
		        B.MAX AS BUDGET_MAX,
		        B.CURRENCY AS BUDGET_CURRENCY,
		        B.SORT_ORDER AS BUDGET_SORT_ORDER,
		        B.MODIFIED_AT AS BUDGET_MODIFIED_AT,
		        B.CREATED_AT AS BUDGET_CREATED_AT,

		        S.ID AS SERVICE_ID,
	            S.NAME AS SERVICE_NAME,
	            S.MODIFIED_AT AS SERVICE_MODIFIED_AT,
	            S.CREATED_AT AS SERVICE_CREATED_AT,
	            SC.ID AS SERVICE_CATEGORY_ID,
	            SC.NAME AS SERVICE_CATEGORY_NAME,
	            SC.SORT_ORDER AS SERVICE_CATEGORY_SORT_ORDER,
	            SC.MODIFIED_AT AS SERVICE_CATEGORY_MODIFIED_AT,
	            SC.CREATED_AT AS SERVICE_CATEGORY_CREATED_AT,

	            A.ID AS ATTACHMENT_ID,
	            A.TITLE AS ATTACHMENT_TITLE,
	      		A.ATTACHMENT_URL AS ATTACHMENT_ATTACHMENT_URL,
		        A.TYPE AS ATTACHMENT_TYPE,
		        A.PROJECT_ID AS ATTACHMENT_PROJECT_ID,
		        A.MODIFIED_AT AS ATTACHMENT_MODIFIED_AT,
		        A.CREATED_AT AS ATTACHMENT_CREATED_AT
          FROM
	      		drones.PROJECTS P
		  LEFT JOIN
	      		drones.USERS CLIENT
	      ON
          		P.CLIENT_ID = CLIENT.ID
		  LEFT JOIN
	      		drones.USERS PILOT
	      ON
          		P.PILOT_ID = PILOT.ID
		  LEFT JOIN
	        	drones.TRANSACTIONS T
	      ON
	        	T.PROJECT_ID = P.ID
	      LEFT JOIN
	      		drones.PROJECTS_PAID_OPTIONS PPO
	      ON
          		P.ID = PPO.PROJECT_ID
	      LEFT JOIN
	      		drones.PAID_OPTIONS PO
	      ON
          		PPO.PAID_OPTION_ID = PO.ID
          LEFT JOIN
	      		drones.LOCATIONS L
	      ON
          		P.LOCATION_ID = L.ID
          LEFT JOIN
            	drones.COUNTRIES C
          ON
            	L.COUNTRY_ID = C.ID
          LEFT JOIN
            	drones.STATES ST
          ON
            	L.STATE_ID = ST.ID
          LEFT JOIN
	      		drones.BUDGETS B
	      ON
          		P.BUDGET_ID = B.ID

          LEFT JOIN
	      		drones.DURATIONS D
	      ON
          		P.DURATION_ID = D.ID

          LEFT JOIN
	      		drones.SERVICES S
	      ON
          		P.SERVICE_ID = S.ID
          LEFT JOIN
	      		drones.SERVICE_CATEGORIES SC
	      ON
          		S.SERVICE_CATEGORY_ID = SC.ID
          LEFT JOIN
	      		 drones.ATTACHMENTS A
	      ON
          		A.PROJECT_ID = P.ID
        ]]>
	</sql>

	<select id="searchProjectsWithAdmin" resultMap="ProjectSearchForAdminResultMap">
		<include refid="searchProjectWithAdmin" />
		<![CDATA[
			INNER JOIN
			(
				SELECT
					P.ID AS PROJECT_ID
				FROM
					drones.PROJECTS P
				LEFT JOIN
					drones.USERS CLIENT
				ON
					P.CLIENT_ID = CLIENT.ID
				LEFT JOIN
					drones.USERS PILOT
				ON
					P.PILOT_ID = PILOT.ID
				LEFT JOIN
	      			drones.LOCATIONS L
	      		ON
          			P.LOCATION_ID = L.ID
          		LEFT JOIN
	      			drones.BUDGETS B
	      		ON
          			P.BUDGET_ID = B.ID

          		LEFT JOIN
	      			drones.DURATIONS D
	      		ON
          			P.DURATION_ID = D.ID

          		LEFT JOIN
	      			drones.SERVICES S
	      		ON
          			P.SERVICE_ID = S.ID
          		LEFT JOIN
	      			drones.SERVICE_CATEGORIES SC
	      		ON
          			S.SERVICE_CATEGORY_ID = SC.ID
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != statuses">
				<![CDATA[
				   AND P.STATUS IN
			   	]]>
				<foreach collection="statuses" item="status" index="index" open="(" separator="," close=")">
					<![CDATA[
				   		#{status}
			   		]]>
				</foreach>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND SC.ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != durationId">
				<![CDATA[
				   AND D.ID = #{durationId}
				]]>
			</if>
			<if test="null != locationId">
				<![CDATA[
				   AND L.ID = #{locationId}
				]]>
			</if>
			<if test="null != city">
				<![CDATA[
				   AND LOWER(L.CITY) LIKE LOWER(CONCAT('%', #{city}, '%'))
				]]>
			</if>
			<if test="null != postcode">
				<![CDATA[
				   AND L.POSTCODE = #{postcode}
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND B.ID = #{budgetId}
				]]>
			</if>
			<if test="null != clientEmail">
				<![CDATA[
				   AND LOWER(CLIENT.EMAIL) LIKE LOWER(CONCAT('%', #{clientEmail}, '%'))
				]]>
			</if>
			<if test="null != pilotEmail">
				<![CDATA[
				   AND LOWER(PILOT.EMAIL) LIKE LOWER(CONCAT('%', #{pilotEmail}, '%'))
				]]>
			</if>
			<if test="null != createdAtAfter">
				<![CDATA[
				   AND P.CREATED_AT >= #{createdAtAfter}
				]]>
			</if>
			<if test="null != createdAtBefore">
				<![CDATA[
				   AND P.CREATED_AT <= #{createdAtBefore}
				]]>
			</if>
		</trim>
		<![CDATA[
			GROUP BY P.ID
				ORDER BY P.CREATED_AT DESC
				LIMIT #{pageSize} OFFSET #{page}
			)
			AS PID
			ON
				P.ID = PID.PROJECT_ID
			ORDER BY P.CREATED_AT DESC
		]]>
	</select>

	<select id="getProjectsWithAdminSearchCount" resultType="java.lang.Integer">
		<![CDATA[
			SELECT
			  	COUNT(DISTINCT P.ID)
			FROM
				drones.PROJECTS P
			LEFT JOIN
				drones.USERS CLIENT
			ON
				P.CLIENT_ID = CLIENT.ID
			LEFT JOIN
				drones.USERS PILOT
			ON
				P.PILOT_ID = PILOT.ID
			LEFT JOIN
				drones.LOCATIONS L
			ON
				P.LOCATION_ID = L.ID
			LEFT JOIN
				drones.BUDGETS B
			ON
				P.BUDGET_ID = B.ID

			LEFT JOIN
				drones.DURATIONS D
			ON
				P.DURATION_ID = D.ID

			LEFT JOIN
				drones.SERVICES S
			ON
				P.SERVICE_ID = S.ID
			LEFT JOIN
				drones.SERVICE_CATEGORIES SC
			ON
				S.SERVICE_CATEGORY_ID = SC.ID
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != statuses">
				<![CDATA[
				   AND P.STATUS IN
			   	]]>
				<foreach collection="statuses" item="status" index="index" open="(" separator="," close=")">
					<![CDATA[
				   			#{status}
			   			]]>
				</foreach>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND SC.ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != durationId">
				<![CDATA[
				   AND D.ID = #{durationId}
				]]>
			</if>
			<if test="null != locationId">
				<![CDATA[
				   AND L.ID = #{locationId}
				]]>
			</if>
			<if test="null != city">
				<![CDATA[
				   AND LOWER(L.CITY) LIKE LOWER(CONCAT('%', #{city}, '%'))
				]]>
			</if>
			<if test="null != postcode">
				<![CDATA[
				   AND L.POSTCODE = #{postcode}
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND B.ID = #{budgetId}
				]]>
			</if>
			<if test="null != clientEmail">
				<![CDATA[
				   AND LOWER(CLIENT.EMAIL) LIKE LOWER(CONCAT('%', #{clientEmail}, '%'))
				]]>
			</if>
			<if test="null != pilotEmail">
				<![CDATA[
				   AND LOWER(PILOT.EMAIL) LIKE LOWER(CONCAT('%', #{pilotEmail}, '%'))
				]]>
			</if>
			<if test="null != createdAtAfter">
				<![CDATA[
				   AND P.CREATED_AT >= #{createdAtAfter}
				]]>
			</if>
			<if test="null != createdAtBefore">
				<![CDATA[
				   AND P.CREATED_AT <= #{createdAtBefore}
				]]>
			</if>
		</trim>
	</select>

	<sql id="getPointsInsideCircle">
		<![CDATA[
			( #{unit} * ACOS( COS( RADIANS(#{userCoordinates.latitude}) ) * COS( RADIANS( X(L.COORDINATES) ) )
						* COS( RADIANS( Y(L.COORDINATES) ) - RADIANS(#{userCoordinates.longitude}) ) + SIN( RADIANS(#{userCoordinates.latitude}) ) * SIN( RADIANS( X(L.COORDINATES) ) ) ) )
		]]>
	</sql>

	<select id="searchProjects" resultMap="ProjectSearchResultMap">
		<![CDATA[
			SELECT
	      		P.ID AS PROJECT_ID,
	      		P.TITLE AS PROJECT_TITLE,
	        	P.SUMMARY AS PROJECT_SUMMARY,
	        	P.CLIENT_ID AS PROJECT_CLIENT_ID,
	        	P.PILOT_ID AS PROJECT_PILOT_ID,

                PILOT.ID AS PILOT_USER_ID,
				PILOT.USERNAME AS PILOT_USER_USERNAME,
				PILOT.EMAIL AS PILOT_USER_EMAIL,
				PILOT.PASSWORD AS PILOT_USER_PASSWORD,
				PILOT.FIRST_NAME AS PILOT_USER_FIRST_NAME,
				PILOT.LAST_NAME AS PILOT_USER_LAST_NAME,
				PILOT.PHOTO_URL AS PILOT_USER_PHOTO_URL,
				PILOT.INTRODUCTION AS PILOT_USER_INTRODUCTION,
				PILOT.SUMMARY AS PILOT_USER_SUMMARY,
				PILOT.FLIGHT_HOURS AS PILOT_USER_FLIGHT_HOURS,
				PILOT.ENABLED AS PILOT_USER_ENABLED,
				PILOT.CONFIRMED AS PILOT_USER_CONFIRMED,
				PILOT.RATING AS PILOT_USER_RATING,
				PILOT.MODIFIED_AT AS PILOT_USER_MODIFIED_AT,
				PILOT.CREATED_AT AS PILOT_USER_CREATED_AT,

				PILOT_L.ID AS PILOT_LOCATION_ID,
				PILOT_L.ADDRESS AS PILOT_LOCATION_ADDRESS,
	        	X(PILOT_L.COORDINATES) AS PILOT_LOCATION_X_COORDINATE,
	        	Y(PILOT_L.COORDINATES) AS PILOT_LOCATION_Y_COORDINATE,
	        	PILOT_L.CITY AS PILOT_LOCATION_CITY,
	        	PILOT_L.POSTCODE AS PILOT_LOCATION_POSTCODE,
	        	PILOT_L.RANGE AS PILOT_LOCATION_RANGE,
	        	PILOT_L.MODIFIED_AT AS PILOT_LOCATION_MODIFIED_AT,
	        	PILOT_L.CREATED_AT AS PILOT_LOCATION_CREATED_AT,

	        	PILOT_G.ID AS PILOT_GROUP_ID,
		        PILOT_G.NAME AS PILOT_GROUP_NAME,
		        PILOT_G.ROLE AS PILOT_GROUP_ROLE,
		        PILOT_G.MODIFIED_AT AS PILOT_GROUP_MODIFIED_AT,
		        PILOT_G.CREATED_AT AS PILOT_GROUP_CREATED_AT,

	        	PILOT_C.ID AS PILOT_COUNTRY_ID,
	        	PILOT_C.NAME AS PILOT_COUNTRY_NAME,
	        	PILOT_C.MODIFIED_AT AS PILOT_COUNTRY_MODIFIED_AT,
	        	PILOT_C.CREATED_AT AS PILOT_COUNTRY_CREATED_AT,

	        	PILOT_S.ID AS PILOT_STATE_ID,
	        	PILOT_S.NAME AS PILOT_STATE_NAME,
	        	PILOT_S.CODE AS PILOT_STATE_CODE,
	        	PILOT_S.MODIFIED_AT AS PILOT_STATE_MODIFIED_AT,
	        	PILOT_S.CREATED_AT AS PILOT_STATE_CREATED_AT,

	        	P.POST_PRODUCTION_REQUIRED AS PROJECT_POST_PRODUCTION_REQUIRED,
	        	P.STATUS AS PROJECT_STATUS,
	        	P.START_DATE AS PROJECT_START_DATE,
	        	P.FINISH_DATE AS PROJECT_FINISH_DATE,
	        	P.AWARD_DATE AS PROJECT_AWARD_DATE,
	        	P.CREATED_AT AS PROJECT_CREATED_AT,
	        	P.MODIFIED_AT AS PROJECT_MODIFIED_AT,

	        	B.ID AS PROJECT_BID_ID,
				B.AMOUNT AS PROJECT_BID_AMOUNT,
				B.CURRENCY AS PROJECT_BID_CURRENCY,
				B.COMMENT AS PROJECT_BID_COMMENT,
				B.PROJECT_ID AS PROJECT_BID_PROJECT_ID,
				B.USER_ID AS PROJECT_USER_ID,
				B.MODIFIED_AT AS PROJECT_BID_MODIFIED_AT,
				B.CREATED_AT AS PROJECT_BID_CREATED_AT,
	        	PID.MAX_BID AS PROJECT_MAX_BID,
	        	PID.BIDS_COUNT AS PROJECT_BIDS_COUNT,
	        	PID.BIDS_AVG AS PROJECT_BIDS_AVG,

	        	T.ID AS TRANSACTION_ID,
				T.WALLET_ID AS TRANSACTION_WALLET_ID,
				T.AMOUNT AS TRANSACTION_AMOUNT,
				T.CURRENCY AS TRANSACTION_CURRENCY,
				T.TYPE AS TRANSACTION_TYPE,
				T.PURPOSE AS TRANSACTION_PURPOSE,
				T.PROJECT_ID AS TRANSACTION_PROJECT_ID,
				T.STATUS AS TRANSACTION_STATUS,
				T.MODIFIED_AT AS TRANSACTION_MODIFIED_AT,
				T.CREATED_AT AS TRANSACTION_CREATED_AT,

	        	PO.ID AS PAID_OPTION_ID,
		        PO.TITLE AS PAID_OPTION_TITLE,
		        PO.DESCRIPTION AS PAID_OPTION_DESCRIPTION,
		        PO.PRICE AS PAID_OPTION_PRICE,
		        PO.CURRENCY AS PAID_OPTION_CURRENCY,
		        PO.RATING AS PAID_OPTION_RATING,
		        PO.MODIFIED_AT AS PAID_OPTION_MODIFIED_AT,
		        PO.CREATED_AT AS PAID_OPTION_CREATED_AT,

		        L.ID AS LOCATION_ID,
		        X(L.COORDINATES) AS LOCATION_X_COORDINATE,
		        Y(L.COORDINATES) AS LOCATION_Y_COORDINATE,
		        L.CITY AS LOCATION_CITY,
		        L.POSTCODE AS LOCATION_POSTCODE,
		        L.MODIFIED_AT AS LOCATION_MODIFIED_AT,
		        L.CREATED_AT AS LOCATION_CREATED_AT,
		        C.ID AS COUNTRY_ID,
		        C.NAME AS COUNTRY_NAME,
		        C.MODIFIED_AT AS COUNTRY_MODIFIED_AT,
		        C.CREATED_AT AS COUNTRY_CREATED_AT,
		        ST.ID AS STATE_ID,
		        ST.NAME AS STATE_NAME,
		        ST.MODIFIED_AT AS STATE_MODIFIED_AT,
		        ST.CREATED_AT AS STATE_CREATED_AT,
				PID.DISTANCE AS DISTANCE,

		        D.ID AS DURATION_ID,
		        D.TITLE AS DURATION_TITLE,
		        D.MIN AS DURATION_MIN,
		        D.MAX AS DURATION_MAX,
		        D.SORT_ORDER AS DURATION_SORT_ORDER,
		        D.MODIFIED_AT AS DURATION_MODIFIED_AT,
		        D.CREATED_AT AS DURATION_CREATED_AT,

		        BD.ID AS BUDGET_ID,
		        BD.TITLE AS BUDGET_TITLE,
		        BD.MIN AS BUDGET_MIN,
		        BD.MAX AS BUDGET_MAX,
		        BD.CURRENCY AS BUDGET_CURRENCY,
		        BD.SORT_ORDER AS BUDGET_SORT_ORDER,
		        BD.MODIFIED_AT AS BUDGET_MODIFIED_AT,
		        BD.CREATED_AT AS BUDGET_CREATED_AT,

		        S.ID AS SERVICE_ID,
	            S.NAME AS SERVICE_NAME,
	            S.MODIFIED_AT AS SERVICE_MODIFIED_AT,
	            S.CREATED_AT AS SERVICE_CREATED_AT,
	            SC.ID AS SERVICE_CATEGORY_ID,
	            SC.NAME AS SERVICE_CATEGORY_NAME,
	            SC.SORT_ORDER AS SERVICE_CATEGORY_SORT_ORDER,
	            SC.MODIFIED_AT AS SERVICE_CATEGORY_MODIFIED_AT,
	            SC.CREATED_AT AS SERVICE_CATEGORY_CREATED_AT,

	            A.ID AS ATTACHMENT_ID,
	            A.TITLE AS ATTACHMENT_TITLE,
	      		A.ATTACHMENT_URL AS ATTACHMENT_ATTACHMENT_URL,
		        A.TYPE AS ATTACHMENT_TYPE,
		        A.PROJECT_ID AS ATTACHMENT_PROJECT_ID,
		        A.MODIFIED_AT AS ATTACHMENT_MODIFIED_AT,
		        A.CREATED_AT AS ATTACHMENT_CREATED_AT
          FROM
	      		drones.PROJECTS P
		  LEFT JOIN
	      		drones.BIDS B
	      ON
	      (
          		P.ID = B.PROJECT_ID
			]]>
		<if test="null != pilotId">
			<![CDATA[
				   		AND B.USER_ID = #{pilotId}
					]]>
		</if>
		<![CDATA[
		  )
		  LEFT JOIN
	      		drones.USERS PILOT
	      ON
          		P.PILOT_ID = PILOT.ID
		  LEFT JOIN
	        	drones.LOCATIONS PILOT_L
	      ON
	        	PILOT.LOCATION_ID = PILOT_L.ID
	      LEFT JOIN
            	drones.COUNTRIES PILOT_C
          ON
            	PILOT_L.COUNTRY_ID = PILOT_C.ID
          LEFT JOIN
            	drones.STATES PILOT_S
          ON
            	PILOT_L.STATE_ID = PILOT_S.ID
          LEFT JOIN
            	drones.USER_GROUPS PILOT_UG
          ON
            	PILOT_UG.USER_ID = PILOT.ID
          LEFT JOIN
	        	drones.GROUPS PILOT_G
	      ON
	        	PILOT_G.ID = PILOT_UG.GROUP_ID
		  LEFT JOIN
	        	drones.TRANSACTIONS T
	      ON
	        	T.PROJECT_ID = P.ID
	      LEFT JOIN
	      		drones.PROJECTS_PAID_OPTIONS PPO
	      ON
          		P.ID = PPO.PROJECT_ID
	      LEFT JOIN
	      		drones.PAID_OPTIONS PO
	      ON
          		PPO.PAID_OPTION_ID = PO.ID
		  LEFT JOIN
				drones.LOCATIONS L
		  ON
				P.LOCATION_ID = L.ID
          LEFT JOIN
            	drones.COUNTRIES C
          ON
            	L.COUNTRY_ID = C.ID
          LEFT JOIN
            	drones.STATES ST
          ON
            	L.STATE_ID = ST.ID
          LEFT JOIN
	      		drones.BUDGETS BD
	      ON
          		P.BUDGET_ID = BD.ID

          LEFT JOIN
	      		drones.DURATIONS D
	      ON
          		P.DURATION_ID = D.ID

          LEFT JOIN
	      		drones.SERVICES S
	      ON
          		P.SERVICE_ID = S.ID
          LEFT JOIN
	      		drones.SERVICE_CATEGORIES SC
	      ON
          		S.SERVICE_CATEGORY_ID = SC.ID
          LEFT JOIN
	      		 drones.ATTACHMENTS A
	      ON
          		A.PROJECT_ID = P.ID
		  INNER JOIN
			(
				SELECT
					P.ID AS PROJECT_ID,
					MAX(B.AMOUNT) AS MAX_BID,
					COUNT(B.ID) AS BIDS_COUNT,
						]]>
							<include refid="getPointsInsideCircle"/> AS DISTANCE,
						<![CDATA[
					AVG(B.AMOUNT) AS BIDS_AVG,
					CASE P.STATUS WHEN 'PENDING' THEN 0 WHEN 'IN_PROGRESS' THEN 1 WHEN 'COMPLETED' THEN 2 ELSE 3 END AS PRIORITY
				FROM
					drones.PROJECTS P
				LEFT JOIN
	      			drones.BIDS B
	      		ON
          			P.ID = B.PROJECT_ID
          		LEFT JOIN
	      			drones.BUDGETS BD
	      		ON
          			P.BUDGET_ID = BD.ID

          		LEFT JOIN
	      			drones.DURATIONS D
	      		ON
          			P.DURATION_ID = D.ID
          		LEFT JOIN
	      			drones.SERVICES S
	      		ON
          			P.SERVICE_ID = S.ID
          		LEFT JOIN
	      			drones.SERVICE_CATEGORIES SC
	      		ON
          			S.SERVICE_CATEGORY_ID = SC.ID
				INNER JOIN
	      			drones.LOCATIONS L
	      		ON
          			P.LOCATION_ID = L.ID
				AND
					L.ID IS NOT NULL
				]]>
		<if test="null != range and range > 0">
			<![CDATA[
				AND
					#{range} >
			]]>
			<include refid="getPointsInsideCircle"/>
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != statuses">
				<foreach collection="statuses" item="status" index="index" open="(" separator=" OR " close=")">
					<![CDATA[
			   			P.STATUS = #{status}
			   		]]>
					<if test="status.toString() != 'NEW' and null != pilotId">
						<![CDATA[
			   				AND B.USER_ID = #{pilotId}
						]]>
					</if>
				</foreach>
			</if>
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND SC.ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != durationId">
				<![CDATA[
				   AND D.ID = #{durationId}
				]]>
			</if>
			<if test="null != postcode">
				<![CDATA[
				   AND L.POSTCODE = #{postcode}
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND BD.ID = #{budgetId}
				]]>
			</if>
			<if test="null != clientId">
				<![CDATA[
				   AND P.CLIENT_ID = #{clientId}
				]]>
			</if>
			<if test="null != id">
				<![CDATA[
				   AND P.ID = #{id}
				]]>
			</if>
			<if test="null != city">
				<![CDATA[
				   AND L.CITY = #{city}
				]]>
			</if>
			<if test="null != clientEmail">
				<![CDATA[
				   AND LOWER(CLIENT.EMAIL) LIKE LOWER(CONCAT('%', #{clientEmail}, '%'))
				]]>
			</if>
			<if test="null != pilotEmail">
				<![CDATA[
				   AND LOWER(PILOT.EMAIL) LIKE LOWER(CONCAT('%', #{pilotEmail}, '%'))
				]]>
			</if>
			<if test="null != startDateBefore">
				<![CDATA[
				   AND P.START_DATE < #{startDateBefore}
				]]>
			</if>
			<if test="null != topLeftCoordinates and null != bottomRightCoordinates">
				<![CDATA[
				   AND MBRContains(
        				GeomFromText
        					('LINESTRING(${topLeftCoordinates.latitude} ${topLeftCoordinates.longitude}, ${bottomRightCoordinates.latitude} ${bottomRightCoordinates.longitude})'),
        						L.COORDINATES)
				]]>
			</if>
			<if test="null != pilotId and null == statuses">
				<![CDATA[
				   AND P.ID IN
				   (
				   		SELECT
				   			B.PROJECT_ID
						FROM
							drones.BIDS B
						WHERE
							B.USER_ID = #{pilotId}
					)
				]]>
			</if>
		</trim>
		<![CDATA[
			GROUP BY P.ID
			]]>
		<include refid="searchOrder"/>
		<if test="null != pageSize and null != page">
			<![CDATA[
				LIMIT #{pageSize} OFFSET #{page}
			]]>
		</if>
		<![CDATA[
			)
			AS PID
			ON
				P.ID = PID.PROJECT_ID
		]]>
		<include refid="searchOrder"/>
	</select>

	<sql id="searchOrder">
		<if test="null != range or null != pilotId">
			ORDER BY
			<if test="null != pilotId and null != statuses">
				<foreach collection="statuses" item="status" index="index" open="" separator="" close="">
					<if test="status.toString() == 'NEW'">
						<![CDATA[
			   				P.SORT_ORDER DESC,
			   			]]>
					</if>
				</foreach>
			</if>
			<if test="null != pilotId and null == statuses">
				<![CDATA[
		  			PRIORITY ASC, P.START_DATE ASC,
				]]>
			</if>
			DISTANCE ASC
		</if>
		<if test="null == range and null == pilotId">
			ORDER BY
			<if test="null != pilotId and null != statuses">
				<foreach collection="statuses" item="status" index="index" open="" separator="" close="">
					<if test="status.toString() == 'NEW'">
						<![CDATA[
			   				P.SORT_ORDER DESC,
			   			]]>
					</if>
				</foreach>
			</if>
			P.CREATED_AT DESC
		</if>
	</sql>

	<select id="getProjectsSearchCount" resultType="java.lang.Integer">
		<![CDATA[
			SELECT
			  	COUNT(DISTINCT P.ID)
			FROM
				drones.PROJECTS P
			LEFT JOIN
				drones.BIDS B
			ON
			(
				P.ID = B.PROJECT_ID
			]]>
				<if test="null != pilotId and null == statuses">
				<![CDATA[
					AND B.USER_ID = #{pilotId}
				]]>
				</if>
			<![CDATA[
			 )
			LEFT JOIN
				drones.BUDGETS BD
			ON
				P.BUDGET_ID = BD.ID
			LEFT JOIN
				drones.DURATIONS D
			ON
				P.DURATION_ID = D.ID
			LEFT JOIN
				drones.SERVICES S
			ON
				P.SERVICE_ID = S.ID
			LEFT JOIN
				drones.SERVICE_CATEGORIES SC
			ON
				S.SERVICE_CATEGORY_ID = SC.ID
			INNER JOIN
	      		drones.LOCATIONS L
	      	ON
          		P.LOCATION_ID = L.ID
			AND
				L.ID IS NOT NULL
				]]>
		<if test="null != range and range > 0">
			<![CDATA[
				AND
					#{range} >
			]]>
			<include refid="getPointsInsideCircle"/>
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != statuses">
				<foreach collection="statuses" item="status" index="index" open="(" separator=" OR " close=")">
					<![CDATA[
			   			P.STATUS = #{status}
			   		]]>
					<if test="status.toString() != 'NEW' and null != pilotId">
						<![CDATA[
			   				AND B.USER_ID = #{pilotId}
						]]>
					</if>
				</foreach>
			</if>
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND SC.ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != durationId">
				<![CDATA[
				   AND D.ID = #{durationId}
				]]>
			</if>
			<if test="null != postcode">
				<![CDATA[
				   AND L.POSTCODE = #{postcode}
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND BD.ID = #{budgetId}
				]]>
			</if>
			<if test="null != clientId">
				<![CDATA[
				   AND P.CLIENT_ID = #{clientId}
				]]>
			</if>
			<if test="null != id">
				<![CDATA[
				   AND P.ID = #{id}
				]]>
			</if>
			<if test="null != city">
				<![CDATA[
				   AND L.CITY = #{city}
				]]>
			</if>
			<if test="null != clientEmail">
				<![CDATA[
				   AND LOWER(CLIENT.EMAIL) LIKE LOWER(CONCAT('%', #{clientEmail}, '%'))
				]]>
			</if>
			<if test="null != pilotEmail">
				<![CDATA[
				   AND LOWER(PILOT.EMAIL) LIKE LOWER(CONCAT('%', #{pilotEmail}, '%'))
				]]>
			</if>
			<if test="null != startDateBefore">
				<![CDATA[
				   AND P.START_DATE < #{startDateBefore}
				]]>
			</if>
			<if test="null != topLeftCoordinates and null != bottomRightCoordinates">
				<![CDATA[
				   AND MBRContains(
        				GeomFromText
        					('LINESTRING(${topLeftCoordinates.latitude} ${topLeftCoordinates.longitude}, ${bottomRightCoordinates.latitude} ${bottomRightCoordinates.longitude})'),
        						L.COORDINATES)
				]]>
			</if>
			<if test="null != pilotId and null == statuses">
				<![CDATA[
				   AND P.ID IN
				   (
				   		SELECT
				   			B.PROJECT_ID
						FROM
							drones.BIDS B
						WHERE
							B.USER_ID = #{pilotId}
					)
				]]>
			</if>
		</trim>
	</select>

	<select id="searchProjectsForMap" resultMap="ProjectSearchForMapResultMap">
		<![CDATA[
			SELECT
				P.ID AS PROJECT_ID,
				P.TITLE AS PROJECT_TITLE,
				P.STATUS AS PROJECT_STATUS,
				BD.ID AS BUDGET_ID,
				BD.TITLE AS BUDGET_TITLE,
		        BD.MIN AS BUDGET_MIN,
		        BD.MAX AS BUDGET_MAX,
		        BD.CURRENCY AS BUDGET_CURRENCY,
		        BD.SORT_ORDER AS BUDGET_SORT_ORDER,
		        BD.MODIFIED_AT AS BUDGET_MODIFIED_AT,
		        BD.CREATED_AT AS BUDGET_CREATED_AT,
				X(L.COORDINATES) AS LOCATION_X_COORDINATE,
		        Y(L.COORDINATES) AS LOCATION_Y_COORDINATE
			FROM
				drones.PROJECTS P
			LEFT JOIN
				drones.BUDGETS BD
			ON
				P.BUDGET_ID = BD.ID
			LEFT JOIN
				drones.SERVICES S
			ON
				S.ID = P.SERVICE_ID
			INNER JOIN
				drones.LOCATIONS L
			ON
				(
						P.LOCATION_ID = L.ID
					AND
						L.COORDINATES IS NOT NULL
				)
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != status">
				<![CDATA[
				   AND P.STATUS = #{status}
				]]>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND S.SERVICE_CATEGORY_ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != id">
				<![CDATA[
				   AND P.ID = #{id}
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND BD.ID = #{budgetId}
				]]>
			</if>
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != createdAtAfter">
				<![CDATA[
				   AND P.CREATED_AT >= #{createdAtAfter}
				]]>
			</if>
			<if test="null != createdAtBefore">
				<![CDATA[
				   AND P.CREATED_AT <= #{createdAtBefore}
				]]>
			</if>
			<if test="null != topLeftCoordinates and null != bottomRightCoordinates">
				<![CDATA[
				   AND MBRContains(
        				GeomFromText
        					('LINESTRING(${topLeftCoordinates.latitude} ${topLeftCoordinates.longitude}, ${bottomRightCoordinates.latitude} ${bottomRightCoordinates.longitude})'),
        						L.COORDINATES)
				]]>
			</if>
		</trim>
	</select>

	<select id="getProjectsForMapSearchCount" resultType="java.lang.Integer">
		<![CDATA[
			SELECT
			  	COUNT(P.ID)
			FROM
				drones.PROJECTS P
			LEFT JOIN
				drones.LOCATIONS L
			ON
				P.LOCATION_ID = L.ID
			LEFT JOIN
				drones.SERVICES S
			ON
				S.ID = P.SERVICE_ID
			LEFT JOIN
				drones.BUDGETS BD
			ON
				P.BUDGET_ID = BD.ID
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != status">
				<![CDATA[
				   AND P.STATUS = #{status}
				]]>
			</if>
			<if test="null != serviceCategoryId">
				<![CDATA[
				   AND S.SERVICE_CATEGORY_ID = #{serviceCategoryId}
				]]>
			</if>
			<if test="null != id">
				<![CDATA[
				   AND P.ID = #{id}
				]]>
			</if>
			<if test="null != title">
				<![CDATA[
				   AND LOWER(P.TITLE) LIKE LOWER(CONCAT('%', #{title}, '%'))
				]]>
			</if>
			<if test="null != budgetId">
				<![CDATA[
				   AND BD.ID = #{budgetId}
				]]>
			</if>
			<if test="null != createdAtAfter">
				<![CDATA[
				   AND P.CREATED_AT >= #{createdAtAfter}
				]]>
			</if>
			<if test="null != createdAtBefore">
				<![CDATA[
				   AND P.CREATED_AT <= #{createdAtBefore}
				]]>
			</if>
			<if test="null != topLeftCoordinates and null != bottomRightCoordinates">
				<![CDATA[
				   AND MBRContains(
        				GeomFromText
        					('LINESTRING(${topLeftCoordinates.latitude} ${topLeftCoordinates.longitude}, ${bottomRightCoordinates.latitude} ${bottomRightCoordinates.longitude})'),
        						L.COORDINATES)
				]]>
			</if>
		</trim>
	</select>

	<select id="getProjectStatusesStatistic" resultMap="ProjectStatusStatisticResultMap">
		SELECT
			COUNT(*) AS PROJECTS_COUNT,
			DATE(P.CREATED_AT) AS PROJECT_CREATED_AT,
			P.STATUS AS PROJECT_STATUS
		FROM
			drones.PROJECTS P
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="null != createdAtAfter">
				<![CDATA[
	               AND P.CREATED_AT >= #{createdAtAfter}
	            ]]>
			</if>
			<if test="null != createdAtBefore">
				<![CDATA[
	               AND P.CREATED_AT <= #{createdAtBefore}
	            ]]>
			</if>
		</trim>
		<![CDATA[
			GROUP BY
				DATE(P.CREATED_AT),
				STATUS
			ORDER BY
				P.CREATED_AT ASC;
		]]>
	</select>

	<update id="updateProject">
        <![CDATA[
          UPDATE
          		drones.PROJECTS
          SET
          		TITLE = #{title},
          	 	SUMMARY = #{summary},
          	 	CLIENT_ID = #{clientId},
          	 	PILOT_ID = #{pilotId},
          	 	POST_PRODUCTION_REQUIRED = #{postProductionRequired},
          	 	STATUS = #{status},
          	 	START_DATE = #{startDate},
          	 	FINISH_DATE = #{finishDate},
          	 	SORT_ORDER = #{sortOrder},
          	 	SERVICE_ID = #{service.id},
          	 	DURATION_ID = #{duration.id},
          	 	BUDGET_ID = #{budget.id},
          	 	AWARD_DATE = #{awardDate}
          WHERE
			 	ID = #{id}
        ]]>
	</update>

	<delete id="deleteProject">
        <![CDATA[
          DELETE
          		FROM drones.PROJECTS
          WHERE
          		ID = #{id}
        ]]>
	</delete>


	<resultMap id="ProjectResultMap" type="com.drones4hire.dronesapp.models.db.projects.Project" autoMapping="false">
		<id column="PROJECT_ID" property="id" />
		<result column="PROJECT_TITLE" property="title" />
		<result column="PROJECT_SUMMARY" property="summary" />
		<result column="PROJECT_CLIENT_ID" property="clientId" />
		<result column="PROJECT_PILOT_ID" property="pilotId" />
		<result column="PROJECT_POST_PRODUCTION_REQUIRED" property="postProductionRequired" />
		<result column="PROJECT_STATUS" property="status" />
		<result column="PROJECT_START_DATE" property="startDate" />
		<result column="PROJECT_FINISH_DATE" property="finishDate" />
		<result column="PROJECT_SORT_ORDER" property="sortOrder" />
		<result column="PROJECT_AWARD_DATE" property="awardDate" />
		<result column="PROJECT_MODIFIED_AT" property="modifiedAt" />
		<result column="PROJECT_CREATED_AT" property="createdAt" />
		<association property="service" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.ServiceMapper.ServiceResultMap"/>
		<association property="location" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper.LocationResultMap"/>
		<association property="duration" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.DurationMapper.DurationResultMap"/>
		<association property="budget" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.BudgetMapper.BudgetResultMap"/>
		<collection property="paidOptions"
			ofType="com.drones4hire.dronesapp.models.db.projects.PaidOption"
			resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.PaidOptionMapper.PaidOptionResultMap" />
		<collection property="attachments"
			ofType="com.drones4hire.dronesapp.models.db.projects.Attachment"
			resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.AttachmentMapper.AttachmentResultMap" />
	</resultMap>

	<resultMap id="ProjectSearchResultMap" type="com.drones4hire.dronesapp.dbaccess.dao.mysql.search.ProjectSearchResult" autoMapping="false">
		<id column="PROJECT_ID" property="id" />
		<result column="PROJECT_MAX_BID" property="maxBid"/>
		<result column="PROJECT_BIDS_COUNT" property="bidsCount"/>
		<result column="PROJECT_BIDS_AVG" property="bidsAvg"/>
		<result column="DISTANCE" property="distance"/>
		<association property="project" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.ProjectMapper.ProjectResultMap"/>
		<association property="transactions" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.TransactionMapper.TransactionResultMap"/>
		<!--<association property="client" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper.UserResultMap" columnPrefix="CLIENT_"/>-->
		<association property="pilot" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper.UserResultMap" columnPrefix="PILOT_"/>
		<collection property="bids" ofType="com.drones4hire.dronesapp.models.db.projects.Bid"
					resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.BidMapper.BidResultMap" columnPrefix="PROJECT_"/>
	</resultMap>

	<resultMap id="ProjectSearchForAdminResultMap" type="com.drones4hire.dronesapp.dbaccess.dao.mysql.search.ProjectSearchResultForAdmin" autoMapping="false">
		<id column="PROJECT_ID" property="id" />
		<association property="project" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.ProjectMapper.ProjectResultMap"/>
		<association property="transactions" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.TransactionMapper.TransactionResultMap"/>
		<association property="client" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper.UserResultMap" columnPrefix="CLIENT_"/>
		<association property="pilot" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper.UserResultMap" columnPrefix="PILOT_"/>
	</resultMap>

	<resultMap id="ProjectSearchForMapResultMap" type="com.drones4hire.dronesapp.dbaccess.dao.mysql.search.ProjectOnMap" autoMapping="false">
		<id column="PROJECT_ID" property="id" />
		<result property="title" column="PROJECT_TITLE"/>
		<result property="status" column="PROJECT_STATUS"/>
		<result property="coordinates.latitude" column="LOCATION_X_COORDINATE"/>
		<result property="coordinates.longitude" column="LOCATION_Y_COORDINATE"/>
		<association property="budget" resultMap="com.drones4hire.dronesapp.dbaccess.dao.mysql.BudgetMapper.BudgetResultMap"/>
	</resultMap>

	<resultMap id="ProjectStatusStatisticResultMap" type="com.drones4hire.dronesapp.dbaccess.dao.mysql.search.ProjectStatisticsResult" autoMapping="false">
		<result property="count" column="PROJECTS_COUNT"/>
		<result property="status" column="PROJECT_STATUS"/>
		<result property="createdAt" column="PROJECT_CREATED_AT" javaType="java.util.Date"/>
	</resultMap>

</mapper>