package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.GroupMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Coordinates;
import com.drones4hire.dronesapp.models.db.commons.Country;
import com.drones4hire.dronesapp.models.db.commons.Location;
import com.drones4hire.dronesapp.models.db.commons.State;
import com.drones4hire.dronesapp.models.db.users.Group;
import com.drones4hire.dronesapp.models.db.users.User;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class UserMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Country COUNTRY = new Country() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final State STATE = new State() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final Location LOCATION = new Location() {

        private static final long serialVersionUID = 1L;
        {
            setAddress("a1");
            setCoordinates(new Coordinates(1.1, 2.2));
            setCountry(COUNTRY);
            setState(STATE);
            setCity("c2");
            setPostcode("1");
        }
    };
    
    private static final Group GROUP = new Group() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setRole(Role.ROLE_CLIENT);
        }
    };
    
    private static final User USER = new User() {
    	 private static final long serialVersionUID = 1L;
         {
        	setUsername("userName");
        	setEmail("email");
        	setPassword("password");
        	setFirstName("firstName");
        	setLastName("lastName");
        	setPhotoURL("url");
        	setIntroduction("intro");
        	setSummary("summary");
        	setEnabled(Boolean.TRUE);
            setLocation(LOCATION);
            setGroups(new ArrayList<Group>());
            getGroups().add(GROUP);
         }
    };

    @Autowired
    private CountryMapper countryMapper;

    @Autowired
    private StateMapper stateMapper;
    
    @Autowired
    private LocationMapper locationMapper;
    
    @Autowired
    private GroupMapper groupMapper;
    
    @Autowired
    private UserMapper userMapper;

    @Test(enabled = ENABLED)
    public void testCreateUser()
    {
    	groupMapper.createGroup(GROUP);
        countryMapper.createCountry(COUNTRY);
        stateMapper.createState(STATE);
        locationMapper.createLocation(LOCATION);
        userMapper.createUser(USER);
        assertNotEquals(USER.getId(), 0, "Location ID must be set up by autogenerated keys");
    }
    
    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateUser"})
    public void testCreateUserGroup()
    {
    	 userMapper.createUserGroup(USER, GROUP);
    	 assertEquals(userMapper.getUserById(USER.getId()).getGroups().size(), 1, "User should have 1 group");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateUserGroup"})
    public void testGetUserById()
    {
        User user = userMapper.getUserById(USER.getId());
        check(user);
    }
    
    @Test(enabled = ENABLED, dependsOnMethods = {"testGetUserById"})
    public void testGetUserByUsername()
    {
        User user = userMapper.getUserByUsername(USER.getUsername());
        check(user);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetUserByUsername"})
    public void testGetAllUsers()
    {
        List<User> users = userMapper.getAllUsers();
        check(users.get(users.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllUsers"})
    public void testUpdateUser()
    {
        COUNTRY.setName("n2");
        countryMapper.createCountry(COUNTRY);
        STATE.setName("n2");
        stateMapper.createState(STATE);
        LOCATION.setAddress("a2");
        LOCATION.setCoordinates(new Coordinates(3.3, 4.4));
        LOCATION.setCountry(COUNTRY);
        LOCATION.setState(STATE);
        LOCATION.setCity("c2");
        LOCATION.setPostcode("2");
        locationMapper.createLocation(LOCATION);
        USER.setUsername("userName2");
        USER.setEmail("email2");
        USER.setPassword("password2");
        USER.setFirstName("firstName2");
        USER.setLastName("lastName2");
        USER.setPhotoURL("url2");
        USER.setIntroduction("intro2");
        USER.setSummary("summary2");
        USER.setEnabled(Boolean.FALSE);
        USER.setLocation(LOCATION);
        USER.setGroups(new ArrayList<Group>());
        USER.getGroups().add(GROUP);
        userMapper.updateUser(USER);
        User user = userMapper.getUserById(USER.getId());
        check(user);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateUser"})
    public void testDeleteUserGroup()
    {
        userMapper.deleteUserGroup(USER.getId(), USER.getGroups().get(0).getId());
        assertEquals(userMapper.getUserById(USER.getId()).getGroups().size(), 0, "User shouldn't have any groups");
    }
    
    @Test(enabled = ENABLED, dependsOnMethods = {"testDeleteUserGroup"})
    public void testDeleteUser()
    {
        userMapper.deleteUser(USER.getId());
        assertNull(userMapper.getUserById(USER.getId()));
    }

    private void check(User user)
    {
        assertEquals(user.getId(), USER.getId(), "User id must match");
        assertEquals(user.getUsername(), USER.getUsername(), "User name must match");
        assertEquals(user.getEmail(), USER.getEmail(), "User email must match");
        assertEquals(user.getPassword(), USER.getPassword(), "User password must match");
        assertEquals(user.getFirstName(), USER.getFirstName(), "User first name must match");
        assertEquals(user.getLastName(), USER.getLastName(), "User last name must match");
        assertEquals(user.getPhotoURL(), USER.getPhotoURL(), "User photo url must match");
        assertEquals(user.getIntroduction(), USER.getIntroduction(), "User introduction must match");
        assertEquals(user.getSummary(), USER.getSummary(), "User summary must match");
        assertEquals(user.isEnabled(), USER.isEnabled(), "User enabled must match");
        Location location = user.getLocation();
        assertEquals(location.getId(), LOCATION.getId(), "Location id must match");
        assertEquals(location.getCoordinates().getLatitude(), LOCATION.getCoordinates().getLatitude(), "Location coordinates latitude must match");
        assertEquals(location.getCoordinates().getLongitude(), LOCATION.getCoordinates().getLongitude(), "Location coordinates longitude must match");
        assertEquals(location.getCountry().getId(), LOCATION.getCountry().getId(), "Location country id must match");
        assertEquals(location.getState().getId(), LOCATION.getState().getId(), "Location state id must match");
        assertEquals(location.getCity(), LOCATION.getCity(), "Location city must match");
        assertEquals(location.getPostcode(), LOCATION.getPostcode(), "Location postcode must match");
        Group group = user.getGroups().get(0);
        assertEquals(group.getId(), GROUP.getId(), "Group id must match");
        assertEquals(group.getName(), GROUP.getName(), "Group name must match");
        assertEquals(group.getRole(), GROUP.getRole(), "Group role must match");
    }
}
