package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.ServiceCategoryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.ServiceMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.services.Service;
import com.drones4hire.dronesapp.models.db.services.ServiceCategory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class ServiceMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final ServiceCategory SERVICE_CATEGORY = new ServiceCategory() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setOrder(1);
        }
    };

    @Autowired
    private ServiceMapper serviceMapper;

    @Autowired
    private ServiceCategoryMapper categoryMapper;

    private static final Service SERVICE = new Service() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setCategory(SERVICE_CATEGORY);
        }
    };

    @Test(enabled = ENABLED)
    public void testCreateService()
    {
        categoryMapper.createServiceCategory(SERVICE_CATEGORY);
        serviceMapper.createService(SERVICE);
        assertNotEquals(SERVICE.getId(), 0, "Service ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateService"})
    public void testGetServiceById()
    {
        Service service = serviceMapper.getServiceById(SERVICE.getId());
        check(service);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetServiceById"})
    public void testGetAllServices()
    {
        List<Service> services = serviceMapper.getAllServices();
        check(services.get(services.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllServices"})
    public void testUpdateService()
    {
        SERVICE_CATEGORY.setName("n2" + DataGenerator.generateNumber(10000));
        categoryMapper.createServiceCategory(SERVICE_CATEGORY);
        SERVICE.setName("n2" + DataGenerator.generateNumber(10000));
        SERVICE.setCategory(SERVICE_CATEGORY);
        serviceMapper.updateService(SERVICE);
        Service service = serviceMapper.getServiceById(SERVICE.getId());
        check(service);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateService"})
    public void testDeleteService()
    {
        serviceMapper.deleteService(SERVICE.getId());
        assertNull(serviceMapper.getServiceById(SERVICE.getId()));
    }

    private void check(Service service)
    {
        assertEquals(service.getId(), SERVICE.getId(), "Service id must match");
        assertEquals(service.getName(), SERVICE.getName(), "Service name must match");
        assertEquals(service.getCategory().getId(), SERVICE_CATEGORY.getId(), "Service category id must match");
    }
}
