package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.State;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class StateMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final State STATE = new State() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setCode("c1" + DataGenerator.generateNumber(10000));
        }
    };

    @Autowired
    private StateMapper stateMapper;

    @Test(enabled = ENABLED)
    public void testCreateState()
    {
        stateMapper.createState(STATE);
        assertNotEquals(STATE.getId(), 0, "State ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateState"})
    public void testGetStateById()
    {
        State state = stateMapper.getStateById(STATE.getId());
        check(state);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetStateById"})
    public void testGetAllStates()
    {
        List<State> states = stateMapper.getAllStates();
        check(states.get(states.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllStates"})
    public void testUpdateState()
    {
        STATE.setName("n2" + DataGenerator.generateNumber(10000));
        STATE.setCode("c2" + DataGenerator.generateNumber(10000));
        stateMapper.updateState(STATE);
        State state = stateMapper.getStateById(STATE.getId());
        check(state);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateState"})
    public void testDeleteState()
    {
        stateMapper.deleteState(STATE.getId());
        assertNull(stateMapper.getStateById(STATE.getId()));
    }

    private void check(State state)
    {
        assertEquals(state.getId(), STATE.getId(), "State id must match");
        assertEquals(state.getName(), STATE.getName(), "State name must match");
        assertEquals(state.getCode(), STATE.getCode(), "State code must match");
    }
}
