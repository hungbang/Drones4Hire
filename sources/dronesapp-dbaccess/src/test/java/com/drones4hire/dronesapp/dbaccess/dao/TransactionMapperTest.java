package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.TransactionMapper;
import com.drones4hire.dronesapp.models.db.commons.Currency;
import com.drones4hire.dronesapp.models.db.payments.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.math.BigDecimal;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class TransactionMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Transaction TRANSACTION = new Transaction() {

        private static final long serialVersionUID = 1L;
        {
            setWalletId(1L);
            setAmount(new BigDecimal(10.00D));
            setCurrency(Currency.USD);
            setType(Type.WITHDRAW);
            setPurpose("p1");
            setProjectId(1L);
            setStatus(Status.COMPLETED);
        }
    };

    @Autowired
    private TransactionMapper transactionMapper;

    @Test(enabled = ENABLED)
    public void testCreateTransaction()
    {
        transactionMapper.createTransaction(TRANSACTION);
        assertNotEquals(TRANSACTION.getId(), 0, "Transaction ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateTransaction"})
    public void testGetTransactionById()
    {
        Transaction transaction = transactionMapper.getTransactionById(TRANSACTION.getId());
        check(transaction);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetTransactionById"})
    public void testGetAllTransactions()
    {
        List<Transaction> transactions = transactionMapper.getAllTransactions();
        check(transactions.get(transactions.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllTransactions"})
    public void testUpdateTransaction()
    {
        TRANSACTION.setWalletId(2L);
        TRANSACTION.setAmount(new BigDecimal(20.00D));
        TRANSACTION.setCurrency(Currency.EUR);
        TRANSACTION.setType(Transaction.Type.SERVICE_FEE);
        TRANSACTION.setPurpose("p2");
        TRANSACTION.setProjectId(2L);
        TRANSACTION.setStatus(Transaction.Status.COMPLETED);
        transactionMapper.updateTransaction(TRANSACTION);
        Transaction transaction = transactionMapper.getTransactionById(TRANSACTION.getId());
        check(transaction);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateTransaction"})
    public void testDeleteTransaction()
    {
        transactionMapper.deleteTransaction(TRANSACTION.getId());
        assertNull(transactionMapper.getTransactionById(TRANSACTION.getId()));
    }

    private void check(Transaction transaction)
    {
        assertEquals(transaction.getId(), TRANSACTION.getId(), "Transaction id must match");
        assertEquals(transaction.getWalletId(), TRANSACTION.getWalletId(), "Transaction wallet id must match");
        assertEquals(transaction.getAmount().compareTo(TRANSACTION.getAmount()), 0, "Transaction amount must match");
        assertEquals(transaction.getCurrency(), TRANSACTION.getCurrency(), "Transaction currency must match");
        assertEquals(transaction.getType(), TRANSACTION.getType(), "Transaction type must match");
        assertEquals(transaction.getPurpose(), TRANSACTION.getPurpose(), "Transaction purpose must match");
        assertEquals(transaction.getProjectId(), TRANSACTION.getProjectId(), "Transaction project id must match");
        assertEquals(transaction.getStatus(), TRANSACTION.getStatus(), "Transaction status must match");
    }
}
