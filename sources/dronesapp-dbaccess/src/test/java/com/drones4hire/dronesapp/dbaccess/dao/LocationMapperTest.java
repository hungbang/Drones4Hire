package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Coordinates;
import com.drones4hire.dronesapp.models.db.commons.Country;
import com.drones4hire.dronesapp.models.db.commons.Location;
import com.drones4hire.dronesapp.models.db.commons.State;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class LocationMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Country COUNTRY = new Country() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final State STATE = new State() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final Location LOCATION = new Location() {

        private static final long serialVersionUID = 1L;
        {
            setAddress("a1");
            setCoordinates(new Coordinates(1.1, 2.2));
            setCountry(COUNTRY);
            setState(STATE);
            setCity("c2");
            setPostcode(1);
        }
    };

    @Autowired
    private CountryMapper countryMapper;

    @Autowired
    private StateMapper stateMapper;
    
    @Autowired
    private LocationMapper locationMapper;

    @Test(enabled = ENABLED)
    public void testCreateLocation()
    {
        countryMapper.createCountry(COUNTRY);
        stateMapper.createState(STATE);
        locationMapper.createLocation(LOCATION);
        assertNotEquals(LOCATION.getId(), 0, "Location ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateLocation"})
    public void testGetLocationById()
    {
        Location location = locationMapper.getLocationById(LOCATION.getId());
        check(location);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetLocationById"})
    public void testGetAllLocations()
    {
        List<Location> locations = locationMapper.getAllLocations();
        check(locations.get(locations.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllLocations"})
    public void testUpdateLocation()
    {
        COUNTRY.setName("n2");
        countryMapper.createCountry(COUNTRY);
        STATE.setName("n2");
        stateMapper.createState(STATE);
        LOCATION.setAddress("a2");
        LOCATION.setCoordinates(new Coordinates(3.3, 4.4));
        LOCATION.setCountry(COUNTRY);
        LOCATION.setState(STATE);
        LOCATION.setCity("c2");
        LOCATION.setPostcode(2);
        locationMapper.updateLocation(LOCATION);
        Location location = locationMapper.getLocationById(LOCATION.getId());
        check(location);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateLocation"})
    public void testDeleteLocation()
    {
        locationMapper.deleteLocation(LOCATION.getId());
        assertNull(locationMapper.getLocationById(LOCATION.getId()));
    }

    private void check(Location location)
    {
        assertEquals(location.getId(), LOCATION.getId(), "Location id must match");
        assertEquals(location.getCoordinates().getLatitude(), LOCATION.getCoordinates().getLatitude(), "Location coordinates latitude must match");
        assertEquals(location.getCoordinates().getLongitude(), LOCATION.getCoordinates().getLongitude(), "Location coordinates longitude must match");
        assertEquals(location.getCountry().getId(), LOCATION.getCountry().getId(), "Location country id must match");
        assertEquals(location.getState().getId(), LOCATION.getState().getId(), "Location state id must match");
        assertEquals(location.getCity(), LOCATION.getCity(), "Location city must match");
        assertEquals(location.getPostcode(), LOCATION.getPostcode(), "Location postcode must match");
    }
}
