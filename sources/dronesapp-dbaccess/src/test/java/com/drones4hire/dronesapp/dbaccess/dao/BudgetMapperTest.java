package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.BudgetMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.math.BigDecimal;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class BudgetMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Budget BUDGET = new Budget() {

        private static final long serialVersionUID = 1L;
        {
            setTitle("t1" + DataGenerator.generateNumber(10000));
            setMin(new BigDecimal(1.01));
            setMax(new BigDecimal(2.02));
            setCurrency(Currency.USD);
            setOrder(1);
        }
    };

    @Autowired
    private BudgetMapper budgetMapper;

    @Test(enabled = ENABLED)
    public void testCreateBudget()
    {
        budgetMapper.createBudget(BUDGET);
        assertNotEquals(BUDGET.getId(), 0, "Budget ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateBudget"})
    public void testGetBudgetById()
    {
        Budget budget = budgetMapper.getBudgetById(BUDGET.getId());
        check(budget);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetBudgetById"})
    public void testGetAllBudgets()
    {
        List<Budget> budgets = budgetMapper.getAllBudgets();
        check(budgets.get(budgets.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllBudgets"})
    public void testUpdateBudget()
    {
        BUDGET.setTitle("t2" + DataGenerator.generateNumber(10000));
        BUDGET.setMin(new BigDecimal(3.03));
        BUDGET.setMax(new BigDecimal(4.04));
        BUDGET.setCurrency(Currency.EUR);
        BUDGET.setOrder(2);
        budgetMapper.updateBudget(BUDGET);
        Budget budget = budgetMapper.getBudgetById(BUDGET.getId());
        check(budget);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateBudget"})
    public void testDeleteBudget()
    {
        budgetMapper.deleteBudget(BUDGET.getId());
        assertNull(budgetMapper.getBudgetById(BUDGET.getId()));
    }

    private void check(Budget budget)
    {
        assertEquals(budget.getId(), BUDGET.getId(), "Budget id must match");
        assertEquals(budget.getTitle(), BUDGET.getTitle(), "Budget title must match");
        //assertEquals(budget.getMin(), BUDGET.getMin(), "Budget min must match");
        //assertEquals(budget.getMax(), BUDGET.getMax(), "Budget max must match");
        assertEquals(budget.getCurrency(), BUDGET.getCurrency(), "Budget currency must match");
        assertEquals(budget.getOrder(), BUDGET.getOrder(), "Budget sort order must match");
    }
}
