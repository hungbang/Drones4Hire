package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.ServiceCategoryMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.services.ServiceCategory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath*:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class ServiceCategoryMapperTest extends AbstractTestNGSpringContextTests {

    @Autowired
    private ServiceCategoryMapper categoryMapper;

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = true;

    private static final ServiceCategory SERVICE_CATEGORY = new ServiceCategory() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setOrder(1);
        }
    };

    @Test(enabled = ENABLED)
    public void createServiceCategoryTest()
    {
        categoryMapper.create(SERVICE_CATEGORY);
        assertNotEquals(SERVICE_CATEGORY.getId(), 0, "Service category ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createServiceCategoryTest"})
    public void getServiceCategoryByIdTest()
    {
        ServiceCategory category = categoryMapper.getServiceCategoryById(SERVICE_CATEGORY.getId());
        checkServiceCategory(category);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"getServiceCategoryByIdTest"})
    public void getAllServiceCategoriesTest()
    {
        List<ServiceCategory> serviceCategories = categoryMapper.getAllServiceCategories();
        checkServiceCategory(serviceCategories.get(serviceCategories.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"getAllServiceCategoriesTest"})
    public void updateServiceCategoryTest()
    {
        SERVICE_CATEGORY.setName("n2" + DataGenerator.generateNumber(10000));
        SERVICE_CATEGORY.setOrder(2);
        categoryMapper.updateServiceCategory(SERVICE_CATEGORY);
        ServiceCategory category = categoryMapper.getServiceCategoryById(SERVICE_CATEGORY.getId());
        checkServiceCategory(category);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"updateServiceCategoryTest"})
    public void deleteServiceCategoryTest()
    {
        categoryMapper.deleteServiceCategory(SERVICE_CATEGORY.getId());
        assertNull(categoryMapper.getServiceCategoryById(SERVICE_CATEGORY.getId()));
    }

    private void checkServiceCategory(ServiceCategory category)
    {
        assertEquals(category.getId(), SERVICE_CATEGORY.getId(), "Service category id must match");
        assertEquals(category.getName(), SERVICE_CATEGORY.getName(), "Service category name must match");
        assertEquals(category.getOrder(), SERVICE_CATEGORY.getOrder(), "Service category order must match");
    }
}
