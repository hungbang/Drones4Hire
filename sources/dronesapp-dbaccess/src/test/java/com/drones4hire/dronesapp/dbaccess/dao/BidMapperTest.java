package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.BidMapper;
import com.drones4hire.dronesapp.models.db.commons.Currency;
import com.drones4hire.dronesapp.models.db.projects.Bid;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class BidMapperTest extends AbstractTestNGSpringContextTests
{
	/**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

	@Autowired
	private BidMapper bidMapper;

	private static final Bid BID = new Bid()
	{

		private static final long serialVersionUID = 1L;
		{
			setAmount(new BigDecimal(10.00D));
			setCurrency(Currency.USD);
			setComment("C1");
			setUserId(1L);
			setProjectId(1L);
		}
	};

	@Test(enabled = ENABLED)
	public void testCreateBid()
	{
		bidMapper.createBid(BID);
		assertNotEquals(BID.getId(), 0, "Bid id not autogenerated");
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testCreateBid" })
	public void testGetBidById()
	{
		check(bidMapper.getBidById(BID.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testGetBidById" })
	public void getBidsByProjectId()
	{
		List<Bid> bids = bidMapper.getBidsByProjectId(1L);
		check(bids.get(0));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "getBidsByProjectId" })
	public void testUpdateBid()
	{
		BID.setAmount(new BigDecimal(20.00D));
		BID.setCurrency(Currency.EUR);
		BID.setComment("C2");
		bidMapper.updateBid(BID);
		check(bidMapper.getBidById(BID.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testUpdateBid" })
	public void testDeleteBid()
	{
		bidMapper.deleteBid(BID.getId());
		assertNull(bidMapper.getBidById(BID.getId()));
	}

	private void check(Bid bid)
	{
		assertEquals(bid.getId(), BID.getId(), "Bid id must match");
		assertEquals(bid.getAmount().compareTo(BID.getAmount()), 0, "Bid amount must match");
		assertEquals(bid.getCurrency(), BID.getCurrency(), "Bid currency must match");
		assertEquals(bid.getComment(), BID.getComment(), "Bid comment must match");
		assertEquals(bid.getProjectId(), BID.getProjectId(), "Bid project ID must match");
		assertEquals(bid.getUserId(), BID.getUserId(), "Bid user ID must match");
	}
}
