package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.PilotLocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Coordinates;
import com.drones4hire.dronesapp.models.db.commons.Country;
import com.drones4hire.dronesapp.models.db.commons.Location;
import com.drones4hire.dronesapp.models.db.commons.State;
import com.drones4hire.dronesapp.models.db.users.PilotLocation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath*:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class PilotLocationMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = true;

    private static final Country COUNTRY = new Country() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final State STATE = new State() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final Location LOCATION = new Location() {

        private static final long serialVersionUID = 1L;
        {
            setAddress("a1");
            setCoordinates(new Coordinates(1.1, 2.2));
            setCountry(COUNTRY);
            setState(STATE);
            setCity("c2");
            setPostcode(1);
        }
    };

    private static final PilotLocation PILOT_LOCATION = new PilotLocation() {

        private static final long serialVersionUID = 1L;
        {
            setUserId(1L);
            setOffice("o1");
            setPhone("p1");
            setAlternativePhone("a1");
            setLocation(LOCATION);
        }
    };

    @Autowired
    private CountryMapper countryMapper;

    @Autowired
    private StateMapper stateMapper;

    @Autowired
    private LocationMapper locationMapper;

    @Autowired
    private PilotLocationMapper pilotLocationMapper;

    @Test(enabled = ENABLED)
    public void testCreatePilotLocation()
    {
        countryMapper.createCountry(COUNTRY);
        stateMapper.createState(STATE);
        locationMapper.createLocation(LOCATION);
        pilotLocationMapper.createPilotLocation(PILOT_LOCATION);
        assertNotEquals(PILOT_LOCATION.getId(), 0, "PilotLocation ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreatePilotLocation"})
    public void testGetPilotLocationById()
    {
        PilotLocation pilotLocation = pilotLocationMapper.getPilotLocationById(PILOT_LOCATION.getId());
        check(pilotLocation);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetPilotLocationById"})
    public void testGetAllPilotLocations()
    {
        List<PilotLocation> pilotLocations = pilotLocationMapper.getAllPilotLocations();
        check(pilotLocations.get(pilotLocations.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllPilotLocations"})
    public void testUpdatePilotLocation()
    {
        locationMapper.createLocation(LOCATION);
        PILOT_LOCATION.setUserId(2L);
        PILOT_LOCATION.setOffice("o2");
        PILOT_LOCATION.setPhone("p2");
        PILOT_LOCATION.setAlternativePhone("a2");
        PILOT_LOCATION.setLocation(LOCATION);
        pilotLocationMapper.updatePilotLocation(PILOT_LOCATION);
        PilotLocation pilotLocation = pilotLocationMapper.getPilotLocationById(PILOT_LOCATION.getId());
        check(pilotLocation);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdatePilotLocation"})
    public void testDeletePilotLocation()
    {
        pilotLocationMapper.deletePilotLocation(PILOT_LOCATION.getId());
        assertNull(pilotLocationMapper.getPilotLocationById(PILOT_LOCATION.getId()));
    }

    private void check(PilotLocation pilotLocation)
    {
        assertEquals(pilotLocation.getId(), PILOT_LOCATION.getId(), "PilotLocation id must match");
        assertEquals(pilotLocation.getUserId(), PILOT_LOCATION.getUserId(), "PilotLocation user id must match");
        assertEquals(pilotLocation.getOffice(), PILOT_LOCATION.getOffice(), "PilotLocation office must match");
        assertEquals(pilotLocation.getPhone(), PILOT_LOCATION.getPhone(), "PilotLocation phone must match");
        assertEquals(pilotLocation.getAlternativePhone(), PILOT_LOCATION.getAlternativePhone(), "PilotLocation alternative phone must match");
        assertEquals(pilotLocation.getLocation().getId(), PILOT_LOCATION.getLocation().getId(), "PilotLocation location id must match");
    }
}
