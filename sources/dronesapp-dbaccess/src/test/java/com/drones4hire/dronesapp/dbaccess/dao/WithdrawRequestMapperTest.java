package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.WithdrawRequestMapper;
import com.drones4hire.dronesapp.models.db.commons.Currency;
import com.drones4hire.dronesapp.models.db.payments.WithdrawRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.math.BigDecimal;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class WithdrawRequestMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final WithdrawRequest WITHDRAW_REQUEST = new WithdrawRequest() {

        private static final long serialVersionUID = 1L;
        {
            setTransactionId(1L);
            setUserId(1L);
            setAmount(new BigDecimal(10.00D));
            setCurrency(Currency.USD);
            setComment("c1");
            setStatus(Status.NEW);
        }
    };

    @Autowired
    private WithdrawRequestMapper withdrawRequestMapper;

    @Test(enabled = ENABLED)
    public void testCreateWithdrawRequest()
    {
        withdrawRequestMapper.createWithdrawRequest(WITHDRAW_REQUEST);
        assertNotEquals(WITHDRAW_REQUEST.getId(), 0, "WithdrawRequest ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateWithdrawRequest"})
    public void testGetWithdrawRequestById()
    {
        WithdrawRequest withdrawRequest = withdrawRequestMapper.getWithdrawRequestById(WITHDRAW_REQUEST.getId());
        check(withdrawRequest);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetWithdrawRequestById"})
    public void testGetAllWithdrawRequests()
    {
        List<WithdrawRequest> withdrawRequests = withdrawRequestMapper.getAllWithdrawRequests();
        check(withdrawRequests.get(withdrawRequests.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllWithdrawRequests"})
    public void testUpdateWithdrawRequest()
    {
        WITHDRAW_REQUEST.setTransactionId(2L);
        WITHDRAW_REQUEST.setUserId(2L);
        WITHDRAW_REQUEST.setAmount(new BigDecimal(20.00D));
        WITHDRAW_REQUEST.setCurrency(Currency.EUR);
        WITHDRAW_REQUEST.setComment("c2");
        WITHDRAW_REQUEST.setStatus(WithdrawRequest.Status.APPROVED);
        withdrawRequestMapper.updateWithdrawRequest(WITHDRAW_REQUEST);
        WithdrawRequest withdrawRequest = withdrawRequestMapper.getWithdrawRequestById(WITHDRAW_REQUEST.getId());
        check(withdrawRequest);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateWithdrawRequest"})
    public void testDeleteWithdrawRequest()
    {
        withdrawRequestMapper.deleteWithdrawRequest(WITHDRAW_REQUEST.getId());
        assertNull(withdrawRequestMapper.getWithdrawRequestById(WITHDRAW_REQUEST.getId()));
    }

    private void check(WithdrawRequest withdrawRequest)
    {
        assertEquals(withdrawRequest.getId(), WITHDRAW_REQUEST.getId(), "WithdrawRequest id must match");
        assertEquals(withdrawRequest.getTransactionId(), WITHDRAW_REQUEST.getTransactionId(), "WithdrawRequest transaction id must match");
        assertEquals(withdrawRequest.getUserId(), WITHDRAW_REQUEST.getUserId(), "WithdrawRequest user id must match");
        assertEquals(withdrawRequest.getAmount().compareTo(WITHDRAW_REQUEST.getAmount()), 0, "WithdrawRequest amount must match");
        assertEquals(withdrawRequest.getCurrency(), WITHDRAW_REQUEST.getCurrency(), "WithdrawRequest currency must match");
        assertEquals(withdrawRequest.getComment(), WITHDRAW_REQUEST.getComment(), "WithdrawRequest comment must match");
        assertEquals(withdrawRequest.getStatus(), WITHDRAW_REQUEST.getStatus(), "WithdrawRequest status must match");
    }
}
