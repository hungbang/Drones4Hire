package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.PortfolioItemMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.ServiceCategoryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Coordinates;
import com.drones4hire.dronesapp.models.db.commons.Country;
import com.drones4hire.dronesapp.models.db.commons.Location;
import com.drones4hire.dronesapp.models.db.commons.State;
import com.drones4hire.dronesapp.models.db.portfolio.PortfolioItem;
import com.drones4hire.dronesapp.models.db.portfolio.PortfolioItem.Type;
import com.drones4hire.dronesapp.models.db.services.ServiceCategory;
import com.drones4hire.dronesapp.models.db.users.Group;
import com.drones4hire.dronesapp.models.db.users.User;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class PortfolioItemMapperTest extends AbstractTestNGSpringContextTests
{

	/**
	 * Turn this on to enable this test
	 */
	private static final boolean ENABLED = false;

	private static final Country COUNTRY = new Country()
	{

		private static final long serialVersionUID = 1L;

		{
			setName("n1" + DataGenerator.generateNumber(10000));
		}
	};

	private static final State STATE = new State()
	{

		private static final long serialVersionUID = 1L;

		{
			setName("n1" + DataGenerator.generateNumber(10000));
		}
	};

	private static final Location LOCATION = new Location()
	{

		private static final long serialVersionUID = 1L;

		{
			setAddress("a1");
			setCoordinates(new Coordinates(1.1, 2.2));
			setCountry(COUNTRY);
			setState(STATE);
			setCity("c2");
			setPostcode(1);
		}
	};

	private static final User USER = new User()
	{
		private static final long serialVersionUID = 1L;

		{
			setUsername("userName");
			setEmail("email");
			setPassword("password");
			setFirstName("firstName");
			setLastName("lastName");
			setPhotoURL("url");
			setIntroduction("intro");
			setSummary("summary");
			setEnabled(Boolean.TRUE);
			setLocation(LOCATION);
			setGroups(new ArrayList<Group>());
		}
	};

	private static final ServiceCategory SERVICE_CATEGORY = new ServiceCategory()
	{
		private static final long serialVersionUID = 1L;

		{
			setName("n1" + DataGenerator.generateNumber(10000));
			setOrder(1);
		}
	};

	private static final PortfolioItem PORTFOLIO_ITEM = new PortfolioItem()
	{
		private static final long serialVersionUID = 1L;

		{
			setName("name");
			setTitle("title");
			setSummary("summary");
			setType(Type.PHOTO);
			setItemURL("Url");
			setServiceCategories(new ArrayList<ServiceCategory>());
			getServiceCategories().add(SERVICE_CATEGORY);
		}
	};

	@Autowired
	private ServiceCategoryMapper categoryMapper;

	@Autowired
	private CountryMapper countryMapper;

	@Autowired
	private StateMapper stateMapper;

	@Autowired
	private LocationMapper locationMapper;

	@Autowired
	private UserMapper userMapper;

	@Autowired
	private PortfolioItemMapper portfolioItemMapper;

	@Test(enabled = ENABLED)
	public void testCreatePortfolioItem()
	{
		countryMapper.createCountry(COUNTRY);
		stateMapper.createState(STATE);
		locationMapper.createLocation(LOCATION);
		userMapper.createUser(USER);
		categoryMapper.createServiceCategory(SERVICE_CATEGORY);
		PORTFOLIO_ITEM.setUserId(USER.getId());
		portfolioItemMapper.createPortfolioItem(PORTFOLIO_ITEM);
		assertNotEquals(PORTFOLIO_ITEM.getId(), 0, "Portfolio Item ID must be set up by autogenerated keys");
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testCreatePortfolioItem" })
	public void testCreatePortfolioCategory()
	{
		portfolioItemMapper.createPortfolioCategory(PORTFOLIO_ITEM, SERVICE_CATEGORY);
		assertEquals(portfolioItemMapper.getPortfolioItemById(PORTFOLIO_ITEM.getId()).getServiceCategories().size(), 1,
				"Portfolio Item should have 1 category");
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testCreatePortfolioCategory" })
	public void testGetPortfolioItemById()
	{
		PortfolioItem item = portfolioItemMapper.getPortfolioItemById(PORTFOLIO_ITEM.getId());
		check(item);
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testGetPortfolioItemById" })
	public void testGetPortfolioItemByUserId()
	{
		PortfolioItem item = portfolioItemMapper.getPortfolioItemByUserId(PORTFOLIO_ITEM.getId());
		check(item);
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testGetPortfolioItemByUserId" })
	public void testGetAllPortfolioItems()
	{
		List<PortfolioItem> items = portfolioItemMapper.getAllPortfolioItems();
		check(items.get(items.size() - 1));
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testGetAllPortfolioItems" })
	public void testUpdatePortfolioItem()
	{
		USER.setUsername("userName2");
		USER.setEmail("email2");
		USER.setPassword("password2");
		USER.setFirstName("firstName2");
		USER.setLastName("lastName2");
		USER.setPhotoURL("url2");
		USER.setIntroduction("intro2");
		USER.setSummary("summary2");
		USER.setEnabled(Boolean.FALSE);
		USER.setLocation(LOCATION);
		USER.setGroups(new ArrayList<Group>());
		userMapper.createUser(USER);
		PORTFOLIO_ITEM.setName("name");
		PORTFOLIO_ITEM.setTitle("title");
		PORTFOLIO_ITEM.setSummary("summary");
		PORTFOLIO_ITEM.setType(Type.VIDEO);
		PORTFOLIO_ITEM.setItemURL("Url");
		portfolioItemMapper.updatePortfolioItem(PORTFOLIO_ITEM);
		PortfolioItem item = portfolioItemMapper.getPortfolioItemById(PORTFOLIO_ITEM.getId());
		check(item);
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testUpdatePortfolioItem" })
	public void testDeletePortfolioCategory()
	{
		portfolioItemMapper.deletePortfolioCategory(PORTFOLIO_ITEM.getId(), PORTFOLIO_ITEM.getServiceCategories().get(0).getId());
		assertEquals(portfolioItemMapper.getPortfolioItemById(PORTFOLIO_ITEM.getId()).getServiceCategories().size(), 0, "Item shouldn't have any category");
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "testDeletePortfolioCategory" })
	public void testDeletePortfolioItem()
	{
		portfolioItemMapper.deletePortfolioItem(PORTFOLIO_ITEM.getId());
		assertNull(portfolioItemMapper.getPortfolioItemById(PORTFOLIO_ITEM.getId()));
	}

	private void check(PortfolioItem item)
	{
		assertEquals(item.getId(), PORTFOLIO_ITEM.getId(), "Portfolio item id must match");
	    assertEquals(item.getName(), PORTFOLIO_ITEM.getName(), "Portfolio item name must match");
	    assertEquals(item.getTitle(), PORTFOLIO_ITEM.getTitle(), "Portfolio item title must match");
	    assertEquals(item.getSummary(), PORTFOLIO_ITEM.getSummary(), "Portfolio item summary must match");
	    assertEquals(item.getType(), PORTFOLIO_ITEM.getType(), "Portfolio item type must match");
	    assertEquals(item.getItemURL(), PORTFOLIO_ITEM.getItemURL(), "Portfolio item item url must match");
	    assertEquals(item.getUserId(), PORTFOLIO_ITEM.getUserId(), "Portfolio item userId must match");
		ServiceCategory category = PORTFOLIO_ITEM.getServiceCategories().get(0);
		assertEquals(category.getId(), SERVICE_CATEGORY.getId(), "Service category id must match");
	    assertEquals(category.getName(), SERVICE_CATEGORY.getName(), "Service category name must match");
	    assertEquals(category.getOrder(), SERVICE_CATEGORY.getOrder(), "Service category order must match");
	}
}
