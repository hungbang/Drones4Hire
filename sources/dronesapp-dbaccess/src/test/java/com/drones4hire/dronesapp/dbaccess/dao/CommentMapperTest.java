package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CommentMapper;
import com.drones4hire.dronesapp.models.db.projects.Comment;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class CommentMapperTest extends AbstractTestNGSpringContextTests
{
	/**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

	@Autowired
	private CommentMapper commentMapper;

	private static final Comment COMMENT = new Comment()
	{

		private static final long serialVersionUID = 1L;
		{
			setComment("C1");
			setUserId(1L);
			setProjectId(1L);
		}
	};

	@Test(enabled = ENABLED)
	public void testCreateComment()
	{
		commentMapper.createComment(COMMENT);
		assertNotEquals(COMMENT.getId(), 0, "Comment id not autogenerated");
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testCreateComment" })
	public void testGetCommentById()
	{
		check(commentMapper.getCommentById(COMMENT.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testGetCommentById" })
	public void getCommentsByProjectId()
	{
		List<Comment> comments = commentMapper.getCommentsByProjectId(1L);
		check(comments.get(0));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "getCommentsByProjectId" })
	public void testUpdateComment()
	{
		COMMENT.setComment("C2");
		commentMapper.updateComment(COMMENT);
		check(commentMapper.getCommentById(COMMENT.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testUpdateComment" })
	public void testDeleteComment()
	{
		commentMapper.deleteComment(COMMENT.getId());
		assertNull(commentMapper.getCommentById(COMMENT.getId()));
	}

	private void check(Comment comment)
	{
		assertEquals(comment.getId(), COMMENT.getId(), "Comment id must match");
		assertEquals(comment.getComment(), COMMENT.getComment(), "Comment text must match");
		assertEquals(comment.getUserId(), COMMENT.getUserId(), "Comment user ID must match");
	}
}
