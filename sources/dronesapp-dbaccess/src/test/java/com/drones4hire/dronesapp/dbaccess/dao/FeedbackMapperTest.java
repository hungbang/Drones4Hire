package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.FeedbackMapper;
import com.drones4hire.dronesapp.models.db.projects.Feedback;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class FeedbackMapperTest extends AbstractTestNGSpringContextTests
{
	/**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

	@Autowired
	private FeedbackMapper feedbackMapper;

	private static final Feedback FEEDBACK = new Feedback()
	{

		private static final long serialVersionUID = 1L;
		{
			setProjectId(1L);
			setFromUserId(1L);
			setToUserId(1L);
			setProjectId(1L);
			setMark(new BigDecimal(10.00D));
			setComment("C1");
		}
	};

	@Test(enabled = ENABLED)
	public void testCreateFeedback()
	{
		feedbackMapper.createFeedback(FEEDBACK);
		assertNotEquals(FEEDBACK.getId(), 0, "Feedback id not autogenerated");
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testCreateFeedback" })
	public void testGetFeedbackById()
	{
		check(feedbackMapper.getFeedbackById(FEEDBACK.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testGetFeedbackById" })
	public void getFeedbacksByProjectId()
	{
		List<Feedback> feedbacks = feedbackMapper.getFeedbacksByProjectId(1L);
		check(feedbacks.get(0));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = { "getFeedbacksByProjectId" })
	public void getFeedbacksByUserId()
	{
		List<Feedback> feedbacks = feedbackMapper.getFeedbacksByUserId(1L);
		check(feedbacks.get(0));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "getFeedbacksByUserId" })
	public void testUpdateFeedback()
	{
		FEEDBACK.setComment("C2");
		FEEDBACK.setMark(new BigDecimal(20.00D));
		feedbackMapper.updateFeedback(FEEDBACK);
		check(feedbackMapper.getFeedbackById(FEEDBACK.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = { "testUpdateFeedback" })
	public void testDeleteFeedback()
	{
		feedbackMapper.deleteFeedback(FEEDBACK.getId());
		assertNull(feedbackMapper.getFeedbackById(FEEDBACK.getId()));
	}

	private void check(Feedback feedback)
	{
		assertEquals(feedback.getId(), FEEDBACK.getId(), "Feedback id must match");
		assertEquals(feedback.getFromUserId(), FEEDBACK.getFromUserId(), "Feedback from user ID must match");
		assertEquals(feedback.getToUserId(), FEEDBACK.getToUserId(), "Feedback to user ID must match");
		assertEquals(feedback.getComment(), FEEDBACK.getComment(), "Feedback comment must match");
		assertEquals(feedback.getMark().compareTo(FEEDBACK.getMark()), 0, "Feedback mark must match");
	}
}
