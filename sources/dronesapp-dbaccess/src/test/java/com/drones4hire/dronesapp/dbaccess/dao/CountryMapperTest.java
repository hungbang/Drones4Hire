package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Country;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class CountryMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Country COUNTRY = new Country() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    @Autowired
    private CountryMapper countryMapper;

    @Test(enabled = ENABLED)
    public void testCreateCountry()
    {
        countryMapper.createCountry(COUNTRY);
        assertNotEquals(COUNTRY.getId(), 0, "Country ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateCountry"})
    public void testGetCountryById()
    {
        Country country = countryMapper.getCountryById(COUNTRY.getId());
        check(country);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetCountryById"})
    public void testGetAllCountries()
    {
        List<Country> countries = countryMapper.getAllCountries();
        check(countries.get(countries.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllCountries"})
    public void testUpdateCountry()
    {
        COUNTRY.setName("n2" + DataGenerator.generateNumber(10000));
        countryMapper.updateCountry(COUNTRY);
        Country country = countryMapper.getCountryById(COUNTRY.getId());
        check(country);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateCountry"})
    public void testDeleteCountry()
    {
        countryMapper.deleteCountry(COUNTRY.getId());
        assertNull(countryMapper.getCountryById(COUNTRY.getId()));
    }

    private void check(Country country)
    {
        assertEquals(country.getId(), COUNTRY.getId(), "Country id must match");
        assertEquals(country.getName(), COUNTRY.getName(), "Country name must match");
    }
}
