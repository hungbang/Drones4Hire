package com.drones4hire.dronesapp.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.CompanyMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.CountryMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.LocationMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.StateMapper;
import com.drones4hire.dronesapp.dbaccess.dao.mysql.UserMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Coordinates;
import com.drones4hire.dronesapp.models.db.commons.Country;
import com.drones4hire.dronesapp.models.db.commons.Location;
import com.drones4hire.dronesapp.models.db.commons.State;
import com.drones4hire.dronesapp.models.db.users.Company;
import com.drones4hire.dronesapp.models.db.users.Group;
import com.drones4hire.dronesapp.models.db.users.User;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class CompanyMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Country COUNTRY = new Country() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final State STATE = new State() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
        }
    };

    private static final Location LOCATION = new Location() {

        private static final long serialVersionUID = 1L;
        {
            setAddress("a1");
            setCoordinates(new Coordinates(1.1, 2.2));
            setCountry(COUNTRY);
            setState(STATE);
            setCity("c2");
            setPostcode(1);
        }
    };
    
    private static final User USER = new User() {
    	 private static final long serialVersionUID = 1L;
         {
        	setUsername("userName");
        	setEmail("email");
        	setPassword("password");
        	setFirstName("firstName");
        	setLastName("lastName");
        	setPhotoURL("url");
        	setIntroduction("intro");
        	setSummary("summary");
        	setEnabled(Boolean.TRUE);
            setLocation(LOCATION);
            setGroups(new ArrayList<Group>());
         }
    };
    
    private static final Company COMPANY = new Company() {
	   	 private static final long serialVersionUID = 1L;
	     {
	    	 setName("name");
	    	 setWebURL("url");
	    	 setContactName("contact name");
	    	 setContactEmail("email");
	    	 setCountry(COUNTRY);
	     }
   };

    @Autowired
    private CountryMapper countryMapper;

    @Autowired
    private StateMapper stateMapper;
    
    @Autowired
    private LocationMapper locationMapper;
    
    @Autowired
    private UserMapper userMapper;

    @Autowired
    private CompanyMapper companyMapper;
    
    @Test(enabled = ENABLED)
    public void testCreateCompany()
    {
        countryMapper.createCountry(COUNTRY);
        stateMapper.createState(STATE);
        locationMapper.createLocation(LOCATION);
        userMapper.createUser(USER);
        COMPANY.setUserId(USER.getId());
        companyMapper.createCompany(COMPANY);
        assertNotEquals(COMPANY.getId(), 0, "Company ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateCompany"})
    public void testGetCompanyById()
    {
    	Company company = companyMapper.getCompanyById(COMPANY.getId());
        check(company);
    }
    
    @Test(enabled = ENABLED, dependsOnMethods = {"testGetCompanyById"})
    public void testGetCompanyByUserId()
    {
    	Company company = companyMapper.getCompanyByUserId(USER.getId());
        check(company);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetCompanyByUserId"})
    public void testGetAllCompanies()
    {
        List<Company> companies = companyMapper.getAllCompanies();
        check(companies.get(companies.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllCompanies"})
    public void testUpdateCompany()
    {
    	COUNTRY.setName("n2");
        countryMapper.createCountry(COUNTRY);
        USER.setUsername("userName2");
        USER.setEmail("email2");
        USER.setPassword("password2");
        USER.setFirstName("firstName2");
        USER.setLastName("lastName2");
        USER.setPhotoURL("url2");
        USER.setIntroduction("intro2");
        USER.setSummary("summary2");
        USER.setEnabled(Boolean.FALSE);
        USER.setLocation(LOCATION);
        USER.setGroups(new ArrayList<Group>());
        userMapper.createUser(USER);
        COMPANY.setUserId(USER.getId());
        COMPANY.setName("name2");
        COMPANY.setWebURL("url2");
        COMPANY.setContactName("contact name2");
        COMPANY.setContactEmail("email2");
        COMPANY.setCountry(COUNTRY);
        companyMapper.updateCompany(COMPANY);
        Company company = companyMapper.getCompanyById(COMPANY.getId());
        check(company);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateCompany"})
    public void testDeleteCompany()
    {
    	companyMapper.deleteCompany(COMPANY.getId());
        assertNull(companyMapper.getCompanyById(COMPANY.getId()));
    }

    private void check(Company company)
    {
        assertEquals(company.getId(), COMPANY.getId(), "Company id must match");
        assertEquals(company.getUserId(), COMPANY.getUserId(), "Company user id must match");
        assertEquals(company.getName(), COMPANY.getName(), "Company id must match");
        assertEquals(company.getWebURL(), COMPANY.getWebURL(), "Company id must match");
        assertEquals(company.getContactName(), COMPANY.getContactName(), "Company id must match");
        assertEquals(company.getContactEmail(), COMPANY.getContactEmail(), "Company id must match");
        Country country = company.getCountry();
        assertEquals(country.getId(), COUNTRY.getId(), "Country id must match");
        assertEquals(country.getName(), COUNTRY.getName(), "Country name must match");
    }
}
