package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.DurationMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.commons.Duration;
import com.drones4hire.dronesapp.models.db.commons.Currency;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.math.BigDecimal;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class DurationMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = true;

    private static final Duration DURATION = new Duration() {

        private static final long serialVersionUID = 1L;
        {
            setTitle("t1" + DataGenerator.generateNumber(10000));
            setMin(1.1);
            setMax(1.1);
            setOrder(1);
        }
    };

    @Autowired
    private DurationMapper durationMapper;

    @Test(enabled = ENABLED)
    public void testCreateDuration()
    {
        durationMapper.createDuration(DURATION);
        assertNotEquals(DURATION.getId(), 0, "Duration ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateDuration"})
    public void testGetDurationById()
    {
        Duration duration = durationMapper.getDurationById(DURATION.getId());
        check(duration);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetDurationById"})
    public void testGetAllDurations()
    {
        List<Duration> durations = durationMapper.getAllDurations();
        check(durations.get(durations.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllDurations"})
    public void testUpdateDuration()
    {
        DURATION.setTitle("t2" + DataGenerator.generateNumber(10000));
        DURATION.setMin(3.3);
        DURATION.setMax(4.4);
        DURATION.setOrder(2);
        durationMapper.updateDuration(DURATION);
        Duration duration = durationMapper.getDurationById(DURATION.getId());
        check(duration);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateDuration"})
    public void testDeleteDuration()
    {
        durationMapper.deleteDuration(DURATION.getId());
        assertNull(durationMapper.getDurationById(DURATION.getId()));
    }

    private void check(Duration duration)
    {
        assertEquals(duration.getId(), DURATION.getId(), "Duration id must match");
        assertEquals(duration.getTitle(), DURATION.getTitle(), "Duration title must match");
        assertEquals(duration.getMin(), DURATION.getMin(), "Duration min must match");
        assertEquals(duration.getMax(), DURATION.getMax(), "Duration max must match");
        assertEquals(duration.getOrder(), DURATION.getOrder(), "Duration sort order must match");
    }
}
