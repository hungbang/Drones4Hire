package com.drones4hire.dronesapp.dbaccess.dao;

import com.drones4hire.dronesapp.dbaccess.dao.mysql.GroupMapper;
import com.drones4hire.dronesapp.dbaccess.utils.DataGenerator;
import com.drones4hire.dronesapp.models.db.users.Group;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

@Test
@ContextConfiguration("classpath*:com/drones4hire/dronesapp/dbaccess/dbaccess-test.xml")
public class GroupMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = true;

    private static final Group GROUP = new Group() {

        private static final long serialVersionUID = 1L;
        {
            setName("n1" + DataGenerator.generateNumber(10000));
            setRole(Role.ROLE_CLIENT);
        }
    };

    @Autowired
    private GroupMapper groupMapper;

    @Test(enabled = ENABLED)
    public void testCreateGroup()
    {
        groupMapper.createGroup(GROUP);
        assertNotEquals(GROUP.getId(), 0, "Group ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testCreateGroup"})
    public void testGetGroupById()
    {
        Group group = groupMapper.getGroupById(GROUP.getId());
        check(group);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetGroupById"})
    public void testGetAllGroups()
    {
        List<Group> groups = groupMapper.getAllGroups();
        check(groups.get(groups.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testGetAllGroups"})
    public void testUpdateGroup()
    {
        GROUP.setName("n2" + DataGenerator.generateNumber(10000));
        GROUP.setRole(Group.Role.ROLE_PILOT);
        groupMapper.updateGroup(GROUP);
        Group group = groupMapper.getGroupById(GROUP.getId());
        check(group);
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"testUpdateGroup"})
    public void testDeleteGroup()
    {
        groupMapper.deleteGroup(GROUP.getId());
        assertNull(groupMapper.getGroupById(GROUP.getId()));
    }

    private void check(Group group)
    {
        assertEquals(group.getId(), GROUP.getId(), "Group id must match");
        assertEquals(group.getName(), GROUP.getName(), "Group name must match");
        assertEquals(group.getRole(), GROUP.getRole(), "Group role must match");
    }
}
